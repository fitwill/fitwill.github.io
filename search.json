[{"title":"【NLP】文本预处理","url":"/2020/02/15/【NLP】Text Pre-Processing/","content":"\n\n\n## 文本预处理\n\n文本是一类序列数据，一篇文章可以看作是字符或单词的序列，本节将介绍文本数据的常见预处理步骤，预处理通常包括四个步骤：1. 读入文本；2. 句子转化为词序列；3. 建立字典，将每个词映射到一个唯一的索引；4.将文本从词的序列转换为索引的序列，方便输入模型。\n\n\n\n### 读入文本\n\n我们用一部英文小说，即H. G. Well的[Time Machine](http://www.gutenberg.org/ebooks/35)，作为示例，展示文本预处理的具体过程。\n\n``` python\nimport collections\nimport re\n\ndef read_time_machine():\n    with open('timemachine.txt', 'r') as f:\n        # 此处正则表达式表示：1.去掉开头结尾的空格和制表符；2.大写字母转小写；\n        # 3.把所有的非a-z的字符转化为空格。\n        lines = [re.sub('[^a-z]+', ' ', line.strip().lower()) for line in f]\n    return lines\n    \nlines = read_time_machine()\nprint('Info: Num of sentences is %d.' % len(lines))\n\n# output: Info: Num of sentences is 3221.\n```\n\n\n\n### 句子转化为词序列 - 简单的分词\n\n将一个句子划分成若干个词（token），转换为一个词的序列。\n``` python\ndef tokenize(sentences, token):\n    \"\"\"Split sentences into word or char tokens\"\"\"\n    if token == 'word':\n        return [sentence.split(' ') for sentence in sentences]\n    elif token == 'char':\n        return [list(sentence) for sentence in sentences]\n    else:\n        print('ERROR: unkown token type '+token)\n        \ntokens = tokenize(lines, 'word')\ntokens[0:2]\n\n# output: [['the', 'time', 'machine', 'by', 'h', 'g', 'wells', ''], ['']]\n```\n\n\n\n### 建立字典\n\n为了方便模型处理，我们需要将字符串转换为数字。因此我们需要先构建一个字典（vocabulary），将每个词映射到一个唯一的索引编号。\n\n```python\nclass Vocab(object):\n    def __init__(self, tokens, min_freq=0, use_special_tokens=False):\n        # min_freq为阈值\n        counter = count_corpus(tokens)\n        self.token_freqs = list(counter.items())\n        self.idx_to_token = []\n        if use_special_tokens:\n            # padding, begin of sentence, end of sentence, unknown\n            # unk是指在语料库中未出现过的token\n            # 需要注意：无论use_special_token参数是否为真，都会使用UNK来表示未登录词。\n            self.pad, self.bos, self.eos, self.unk = (0, 1, 2, 3)\n            self.idx_to_token += ['', '', '', '']\n        else:\n            self.unk = 0\n            self.idx_to_token += ['']\n        self.idx_to_token += [token for token, freq in self.token_freqs\n                        if freq >= min_freq and token not in self.idx_to_token]\n        self.token_to_idx = dict()\n        for idx, token in enumerate(self.idx_to_token):\n            self.token_to_idx[token] = idx\n\n    def __len__(self):\n        return len(self.idx_to_token)\n\n    def __getitem__(self, tokens):\n        if not isinstance(tokens, (list, tuple)):\n            return self.token_to_idx.get(tokens, self.unk)\n        return [self.__getitem__(token) for token in tokens]\n\n    def to_tokens(self, indices):\n        if not isinstance(indices, (list, tuple)):\n            return self.idx_to_token[indices]\n        return [self.idx_to_token[index] for index in indices]\n\ndef count_corpus(sentences):\n    tokens = [tk for st in sentences for tk in st]\n    return collections.Counter(tokens)  # 返回一个字典，记录每个词的出现次数\n  \n  \nvocab = Vocab(tokens)\nprint(list(vocab.token_to_idx.items())[0:10])\n\n# output: [('', 0), ('the', 1), ('time', 2), ('machine', 3), ('by', 4), ('h', 5), ('g', 6), ('wells', 7), ('i', 8), ('traveller', 9)]\n```\n\n\n\n### 将词转为索引\n\n使用字典，我们可以将原文本中的句子从单词序列转换为索引序列。\n\n```python\nfor i in range(8, 10):\n    print('words:', tokens[i])\n    print('indices:', vocab[tokens[i]])\n    \n# output: \n# words: ['the', 'time', 'traveller', 'for', 'so', 'it', 'will', 'be', 'convenient', 'to', 'speak', 'of', 'him', '']\n# indices: [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0]\n# words: ['was', 'expounding', 'a', 'recondite', 'matter', 'to', 'us', 'his', 'grey', 'eyes', 'shone', 'and']\n# indices: [20, 21, 22, 23, 24, 16, 25, 26, 27, 28, 29, 30]\n```\n\n\n\n### 用现有工具进行分词\n\n我们前面介绍的分词方式非常简单，它至少有以下几个缺点:\n1. 标点符号通常可以提供语义信息，但是我们的方法直接将其丢弃了\n2. 类似“shouldn't\", \"doesn't\"这样的词会被错误地处理\n3. 类似\"Mr.\", \"Dr.\"这样的词会被错误地处理\n\n我们可以通过引入更复杂的规则来解决这些问题.\n\n下面是一个简单的例子：\n\n```python\ntext = \"Mr. Chen doesn't agree with my suggestion.\"\nfrom nltk.tokenize import word_tokenize\nprint(word_tokenize(text))\n\n# output: ['Mr.', 'Chen', 'does', \"n't\", 'agree', 'with', 'my', 'suggestion', '.']\n```\n\n","tags":["Dive系列"],"categories":["NLP"]},{"title":"【GNN】Note：图深度表示基础和前沿进展","url":"/2020/02/10/【GNN】Note：图深度表示基础和前沿进展/","content":"\n![1](Note：图深度表示基础和前沿进展/1.jpg)\n\n![2](Note：图深度表示基础和前沿进展/2.jpg)\n\n![3](Note：图深度表示基础和前沿进展/3.jpg)\n\n![4](Note：图深度表示基础和前沿进展/4.jpg)\n\n![5](Note：图深度表示基础和前沿进展/5.jpg)\n\n![6](Note：图深度表示基础和前沿进展/6.jpg)\n\n![7](Note：图深度表示基础和前沿进展/7.jpg)\n\n![8](Note：图深度表示基础和前沿进展/8.jpg)\n\n![9](Note：图深度表示基础和前沿进展/9.jpg)","tags":["GNN"],"categories":["GNN"]},{"title":"【NLP】L1. Introduction and Word Vectors","url":"/2020/01/18/【NLP】L1. Introduction and Word Vectors/","content":"\n![1](L1-Introduction-and-Word-Vectors/1.jpg)\n\n![2](L1-Introduction-and-Word-Vectors/2.jpg)\n\n![3](L1-Introduction-and-Word-Vectors/3.jpg)","tags":["CS224N"],"categories":["NLP"]},{"title":"Hello World","url":"/2020/01/11/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]