[{"title":"XGBoost面试题总结","url":"/2020/07/23/XGBoost面试题总结/","content":"\n本文对`XGBoost`的面试题进行梳理，需要首先对`GBDT`/`XGBoost`/`Ensemble Learning`有一定的了解、\n\n#### 简单介绍一下XGBoost\n\nXGBoost是一种boosting的方法，其核心思想为每一棵树都是对之前的拟合残差的再拟合，直到残差足够小。XGBoost的基分类器可以由用户选择树或者线性，损失函数也可以自定义，只需要满足二阶可导即可。XGBoost对GBDT进行了一系列优化，比如损失函数进行了二阶泰勒展开、目标函数加入正则项、支持并行和默认缺失值处理等，在可扩展性和训练速度上有了巨大的提升，但其核心思想没有大的变化。\n\n---\n\n#### XGBoost和GBDT的区别是什么？\n\n- **基分类器**：XGBoost的基分类器不仅支持CART决策树，还支持线性分类器，此时XGBoost相当于带L1和L2正则化项的Logistic回归（分类问题）或者线性回归（回归问题）。\n- **导数信息**：XGBoost对损失函数做了二阶泰勒展开，GBDT只用了一阶导数信息，并且XGBoost还支持自定义损失函数，只要损失函数一阶、二阶可导。\n- **正则项**：xgboost在代价函数里加入了正则项，用于控制模型的复杂度。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合，这也是xgboost优于传统GBDT的一个特性。\n- **列抽样**：XGBoost支持列采样，与随机森林类似，用于防止过拟合。\n- **缺失值处理**：对树中的每个非叶子结点，XGBoost可以自动学习出它的默认分裂方向。如果某个样本该特征值缺失，会将其划入默认分支。\n- **并行化**：注意不是tree维度的并行，而是特征维度的并行。XGBoost预先将每个特征按特征值排好序，存储为块结构，分裂结点时可以并行查找每个特征的最佳分割点，在极大提升训练速度。\n\n---\n\n#### XGBoost为什么使用泰勒二阶展开？\n\n- 二阶展开可以更大程度的保留原函数的信息，更加准确；\n- 二阶信息能够让梯度收敛的更快，类似牛顿法比SGD收敛更快。一阶信息描述梯度变化方向，二阶信息可以描述梯度变化方向是如何变化的；\n- 此外，这样可以允许用户自定义损失函数。\n\n---\n\n#### XGBoost为什么快？\n\n- **分块并行**：训练前每个特征按特征值进行排序并存储为Block结构，后面查找特征分割点时重复使用，并且支持并行查找每个特征的分割点；\n- **候选分位点**：每个特征采用常数个分位点作为候选分割点；\n- **CPU cache 命中优化**：不懂；\n- **Block 处理优化**：Block预先放入内存；Block按列进行解压缩；将Block划分到不同硬盘来提高吞吐\n\n---\n\n#### XGBoost中叶子结点的权重如何计算出来？\n\nXGBoost目标函数最终推导形式如下：\n\n<img src=\"XGBoost面试题总结/image-20200725003427754.png\" alt=\"image-20200725003427754\" style=\"zoom:40%;\" />\n\n利用一元二次函数求最值的知识，当目标函数达到最小值$Obj$时，每个叶子结点的权重为$w_j$。\n\n具体公式如下：\n\n<img src=\"XGBoost面试题总结/image-20200725003458316.png\" alt=\"image-20200725003458316\" style=\"zoom:50%;\" />\n\n---\n\n#### XGBoost为什么可以并行训练？\n\n- XGBoost的并行，并不是说每棵树可以并行训练，XGB本质上仍然采用boosting思想，每棵树训练前需要等前面的树训练完成才能开始训练。\n- XGBoost的并行，指的是特征维度的并行：在训练之前，每个特征按特征值对样本进行预排序，并存储为Block结构，在后面查找特征分割点时可以重复使用，而且特征已经被存储为一个个block结构，那么在寻找每个特征的最佳分割点时，可以利用多线程对每个block并行计算。\n\n---\n\n#### XGBoost防止过拟合的方法\n\n- **目标函数添加正则项**：叶子节点个数+叶子节点权重的L2正则化；\n- **列抽样**：训练的时候只用一部分特征（不考虑剩余的block块即可）；\n- **shrinkage**: 缩减单棵树带来的影响，为了给后面的训练留出更多的学习空间。\n\n---\n\n### XGBoost中如何对树进行剪枝\n\n- 在目标函数中增加了正则项：使用叶子结点的数目和叶子结点权重的L2模的平方，控制树的复杂度。\n- 在结点分裂时，定义了一个阈值，如果分裂后目标函数的增益小于该阈值，则不分裂。\n- 当引入一次分裂后，重新计算新生成的左、右两个叶子结点的样本权重和。如果任一个叶子结点的样本权重低于某一个阈值（最小样本权重和），也会放弃此次分裂。\n- XGBoost 先从顶到底建立树直到最大深度，再从底到顶反向检查是否有不满足分裂条件的结点，进行剪枝。\n\n---\n\n#### XGBoost如何处理缺失值？\n\n- 在特征k上寻找最佳 split point 时，不会对该列特征 missing 的样本进行遍历，而只对该列特征值为 non-missing 的样本上对应的特征值进行遍历，通过这个技巧来减少了为稀疏离散特征寻找 split point 的时间开销；\n- 在非叶子节点的每次分裂时，模型会学习出一个default direction，具体做法是把所有缺失值放在特征值的排序序列最左边和最右边，分别计算两种情况下的最优score，选择更优的那个split以及direction。\n\n---\n\n#### XGBoost如何选择最佳分裂点？\n\n- 对特征进行预排序，存储在block里，并propose一批百分位点当做分裂点备选；\n- 对每个特征，分别计算以第k个值作为分裂的score，选择最高的；\n\n---\n\n#### XGBoost的Scalable性如何体现？\n\n- **基分类器的scalability**：弱分类器可以支持CART决策树，也可以支持LR和Linear。\n- **目标函数的scalability**：支持自定义loss function，只需要其一阶、二阶可导。有这个特性是因为泰勒二阶展开，得到通用的目标函数形式。\n\n---\n\n#### XGBoost如何评价特征的重要性？\n\n- **weight**：该特征在所有树中被用作特征在所有树中作为划分属性的次数；\n- **gain**：该特征在其出现过的所有树中产生的平均增益。\n- **cover**：该特征在其出现过的所有树中的平均覆盖范围。覆盖范围这里指的是一个特征用作分割点后，其影响的样本数量，即有多少样本经过该特征分割到两个子节点。\n\n---\n\n#### XGBooost参数调优的一般步骤\n\n首先需要初始化一些基本变量，例如：\n\n- max_depth = 5\n- min_child_weight = 1\n- gamma = 0\n- subsample, colsample_bytree = 0.8\n- scale_pos_weight = 1\n\n1. **确定learning rate和estimator的数量**\n\n   learning rate可以先用0.1，用cv来寻找最优的estimators\n\n2. **max_depth和 min_child_weight**\n\n   我们调整这两个参数是因为，这两个参数对输出结果的影响很大。我们首先将这两个参数设置为较大的数，然后通过迭代的方式不断修正，缩小范围。\n\n   max_depth，每棵子树的最大深度，check from range(3,10,2)。\n\n   min_child_weight，子节点的权重阈值，check from range(1,6,2)。\n\n   如果一个结点分裂后，它的所有子节点的权重之和都大于该阈值，该叶子节点才可以划分。\n\n3. **gamma**\n\n   也称作最小划分损失`min_split_loss`，check from 0.1 to 0.5，指的是，对于一个叶子节点，当对它采取划分之后，损失函数的降低值的阈值。如果大于该阈值，则该叶子节点值得继续划分。如果小于该阈值，则该叶子节点不值得继续划分。\n\n4. **subsample, colsample_bytree**\n\n   subsample是对训练的采样比例\n\n   colsample_bytree是对特征的采样比例\n\n   both check from 0.6 to 0.9\n\n5. **正则化参数**\n\n   alpha 是L1正则化系数，try 1e-5, 1e-2, 0.1, 1, 100\n\n   lambda 是L2正则化系数\n\n6. **降低学习率**\n\n   降低学习率的同时增加树的数量，通常最后设置学习率为0.01~0.1\n\n---\n\n#### XGBoost模型如果过拟合了怎么解决\n\n当出现过拟合时，有两类参数可以缓解：\n\n第一类参数：用于直接控制模型的复杂度。包括`max_depth,min_child_weight,gamma` 等参数\n\n第二类参数：用于增加随机性，从而使得模型在训练时对于噪音不敏感。包括`subsample,colsample_bytree`\n\n还有就是直接减小`learning rate`，但需要同时增加`estimator` 参数。\n\n---\n\n","categories":["机器学习基础"]},{"title":"面试题整理","url":"/2020/07/16/面试题整理/","content":"\n\n## ML\n\nXGBoost如何实现并行？（腾讯实习面）\n\n介绍XGBoost（快手、京东一面）\n\nXGBoost如何处理空值？（京东一面）\n\nsoftmax函数的作用是？形式是？为什么是这个形式？（京东二面）\n\n了解logistic regression吗，介绍一下。求导之后的形式是什么？（百度一面）\n\n- [ ] **谈一下L1/L2 norm（腾讯实习面）**\n\nL1/L2 norm都是缓解模型过拟合的手段。其中：\n\nL1 norm又称LASSO，是在模型损失函数后加上了\n\n- [x] **什么是ROC/AUC，如何评估分类任务（百度一面）**\n\n**ROC**曲线的横轴是假阳性率（真实标签为negative的预测为positive的概率），纵轴是真阳性率（真实标签为positive的预测为positive的概率），当y=x时，表示无论真实标签是pos还是neg，模型预测一个样本为positive的概率都相同。可以通俗理解为，模型这时完全是在乱猜，与抛硬币本质相同，因此我们一般认为AUC的最低值为0.5。\n\n而我们希望的是真实标签为1的都能预测为1，真实标签为0的都不要预测为1，因此，如果不同模型的ROC曲线没有交叉，ROC曲线越接近左上角的模型越好。如果有交叉，可以通过AUC来评估。\n\n**AUC**指的是ROC曲线下的面积，物理含义为正例排在负例前面的概率。AUC同时考虑了分类器对正例和负例的分类能力，在样本不均衡的情况下依然可以做出合理的评价，对样本是否不平衡分布并不敏感。举例：99人没有得病，1人得病，如果全部预测为没得病，则acc为99%，但是AUC为0.5，这样就规避了不平衡带来的问题。\n\n\n\n什么是交叉熵损失函数？（百度一面）\n\n\n\nXGB有什么超参？发现训练集和测试集效果不同如何调参？（百度一面）\n\n怎么判断是过拟合还是欠拟合？（百度一面）\n\n如何解决过拟合？（百度二面）\n\n\n\n\n\n## NLP\n\n介绍一下transformer\n\n为什么Transformer比seq2seq要好？（京东二面）\n\nself-attention为什么效果好？（京东二面）\n\nself-attention的表达式为什么除以根号d？（快手一面）\n\n介绍一下word embedding，什么是negative sampling？（百度一面）\n\n介绍一下TFIDF（快手一面）\n\n介绍下pre train（百度一面）\n\n\n\n## 数学\n\n- 如何理解矩阵的特征值与特征向量，讲一下SVD分解？（京东二面）\n\n  https://www.zybuluo.com/Perfect-Demo/note/1101229\n\n"},{"title":"XGBoost论文阅读","url":"/2020/07/12/【机器学习基础】XGBoost/","content":"\n自从陈天奇于2015年提出XGBoost以来，该模型就一直在各大数据竞赛中当作大杀器被频繁祭出。速度快、效果好是XGBoost的最大优点。XGBoost与GBDT同出一脉，都属于boosting集成学习算法，但XGBoost相较于GBDT要青出于蓝而胜于蓝。\n\n XGBoost的全称为eXtreme Gradient Boosting，[论文](https://arxiv.org/pdf/1603.02754.pdf)，本篇记录即建立在论文之上。\n\n## Review Ensemble Learning\n\n<img src=\"【机器学习基础】XGBoost/image-20200715185603736.png\" alt=\"image-20200715185603736\" style=\"zoom:50%;\" />\n\n\n\n\n\n## Tree Boosting in a Nutshell\n\n核心思想：基于残差的训练，加性模型\n\n- 每个base model都是weak learner，产生残差后，由下级weak learner拟合残差。\n\n- 即训练第二个模型的时候，$X$不变，$y$变为$(y-y_1)$，以此类推。\n\n- 最后的预测结果为每个weak learner的预测值之和。\n\n  \n\n### Regularized Learning Objective and Gradient Tree Boosting\n\n#### 目标函数\n\n<img src=\"【机器学习基础】XGBoost/image-20200715224143295.png\" alt=\"image-20200715224143295\" style=\"zoom:50%;\" />\n\n- $f_k(x_i)$ 表示模型的第 $k$ 棵树对样本 $x_i$ 的预测结果。\n- 目标函数包含了：\n  - 每个样本的损失之和：分类模型cross entropy loss，回归模型RMSE；\n  - 每棵树的惩罚：可能是对树的深度，叶节点权重，叶节点数量等的限制。\n- 正则化项的作用是防止模型的过拟合。\n\n<img src=\"【机器学习基础】XGBoost/image-20200715233401688.png\" alt=\"image-20200715233401688\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】XGBoost/image-20200715234519622.png\" alt=\"image-20200715234519622\" style=\"zoom:50%;\" />\n\n注：手写体最右侧的 $Ωf(t)$ 实际应为 $Ω(f_t)$ \n\n至此，我们构造出了目标函数。\n\n\n\n#### 近似目标函数\n\n我们可以使用泰勒展开的二阶形式对目标函数做一个近似。为什么使用泰勒二阶展开，是因为它可以被用于更快的最优化目标函数。\n\n<img src=\"【机器学习基础】XGBoost/image-20200716003154915.png\" alt=\"image-20200716003154915\" style=\"zoom:50%;\" />\n\n$g_i$，$h_i$ 分别是 $f(x)$ 一阶倒数和二阶导数。\n\n这里可以这么理解：$f(x) = l(y_i, {y^{hat}_i}^{(t-1)}) $， $f(x+△x) = l(y_i, {y^{hat}_i}^{(t-1)} + f_t(x_i))$\n\n<img src=\"【机器学习基础】XGBoost/image-20200716202712717.png\" alt=\"image-20200716202712717\" style=\"zoom:50%;\" />\n\nG/h都是很容易计算的，但是 $f_t(x)$ / $Ω(f_t)$应该如何表示呢？它是一棵树，如何表示成函数的形式？\n\n\n\n#### 定义树的表达\n\n<img src=\"【机器学习基础】XGBoost/image-20200716203133182.png\" alt=\"image-20200716203133182\" style=\"zoom:50%;\" />\n\n\n\n这里 $w$，$q$是需要学习出来的，这就是对树的参数化。\n\n另外，我们再参数化树的复杂度函数。\n\n<img src=\"【机器学习基础】XGBoost/image-20200716205746249.png\" alt=\"image-20200716205746249\" style=\"zoom:50%;\" />\n\n\n\n#### 新的目标函数\n\n<img src=\"【机器学习基础】XGBoost/image-20200716213353383.png\" alt=\"image-20200716213353383\" style=\"zoom:50%;\" />\n\n从每个样本的角度到每个叶节点的角度，实质上只是对样本按照节点做了一次排列组合。\n\n至此，就转换成了对二次方的优化。\n\n<img src=\"【机器学习基础】XGBoost/image-20200716223618723.png\" alt=\"image-20200716223618723\" style=\"zoom:50%;\" />\n\n***Obj*** 函数可以用于衡量树结构 ***q(·)*** 的好坏。\n\n以上讨论均建立在树的形状已知的情况下的计算，那么如何确定树的形状呢？\n\n\n\n#### 确定最佳的树的形状\n\n一棵树可以有很多种形状的可能，每种形状都会对应一个可以计算出的obj。\n\n最佳的树的形状，对应的obj应该是所有形状对应的objs中最优的。\n\n<img src=\"【机器学习基础】XGBoost/image-20200716224028453.png\" alt=\"image-20200716224028453\" style=\"zoom:50%;\" />\n\n暴力搜索的方式显然太费时间了。\n\n回顾决策树的生长过程，以ID3为例，每次分裂都是选择可以使得信息增益最大的feature来做split，因此类比到这里，我们可以选择使得$|obj_{old} - obj_{new}|$ 值最大的feature来做split。\n\n<img src=\"【机器学习基础】XGBoost/image-20200716231239511.png\" alt=\"image-20200716231239511\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】XGBoost/image-20200719134628131.png\" alt=\"image-20200719134628131\" style=\"zoom:50%;\" />\n\n当Gain>0时候，叶节点可以进行分裂。\n\n\n\n### Shrinkage and Column Subsampling\n\n除了在目标函数中加入惩罚项，作者还提出了两种防止过拟合的方式。\n\n#### Shrinkage\n\n在每一次提升树训练迭代后，在前面乘一个因子 $η$ 来收缩其权重（也就是我们说的学习率，或者叫步长）。与SGD中的学习率类似，收缩减少了每棵树的影响，并为将来的树模型留出了改进模型的空间。\n\n#### Column Subsampling\n\n这个技术用于随机森林中。根据用户反馈，使用列采样可以比传统的行采样（同样支持）更能防止过度采样。列采样还能加速稍后描述的并行算法。\n\n\n\n## Split Finding Algorithm\n\n### 精确贪心搜索\n\n精确算法要枚举所有features的所有分裂方式，这肯定会耗费很多时间。为了提高效率，算法会根据特征的值对其进行预排序，并按排好的顺序访问数据，下面是算法描述。值得注意的是，原文中，数据的维度是m而不是n，此处猜测m代表进行column sampling之后的结果，小于或等于n。\n\n<img src=\"【机器学习基础】XGBoost/image-20200721170503844.png\" alt=\"image-20200721170503844\" style=\"zoom:50%;\" />\n\n算法的思想可以总结为：\n\n- 预排序：对于某叶节点下的sample集合，依据特征k，对samples进行排序，得到m个排序后的集合（共m个特征）；\n- 分割节点：遍历第k个集合，依次把每个第j个样本都做为splitting point，计算该split下的Score；\n- 按照最高的score对该叶节点进行split。\n\n\n\n### 近似算法\n\n精确算法很精确，但是当数据量十分庞大的时候，数据无法一次性加载进内存，则搜索算法就无法执行，而且他也很耗时。于是作者提出了近似的搜索算法，该算法会：\n\n- 首先，根据特征的百分位点来预设一些candidate splitting points；\n\n- 接下来，将连续的特征值（相邻的）映射到由这些candidates分出的桶中;\n- 累加每个桶的G/H，以加和后的GH计算score，找出其中找到最优的桶；\n\n<img src=\"【机器学习基础】XGBoost/image-20200721174834509.png\" alt=\"image-20200721174834509\" style=\"zoom:50%;\" />\n\n这种分桶的方式，由于每个桶内的独立计算，允许了其并行进行，只需最后对每个并行节点的值作比较即可。\n\n> <u>举🌰说明</u>\n>\n> <img src=\"【机器学习基础】XGBoost/XGBoost-Detail-Analysis5.png\" alt=\"XGBoostDetailAnalysis5\" style=\"zoom:120%;\" />\n>\n> $$ Gain = max\\{ Gain, \\frac{G_1^2}{H_1 + \\lambda} + \\frac{G_{23}^2}{H_{23} + \\lambda} - \\frac{G_{123}^2}{H_{123} + \\lambda} - \\gamma,\\; \\frac{G_{12}^2}{H_{12} + \\lambda} + \\frac{G_3^2}{H_3 + \\lambda} - \\frac{G_{123}^2}{H_{123} + \\lambda} - \\gamma\\} $$\n\n\n\n分桶有两种模式：\n\n- 全局模式：在算法开始时，对每个维度分桶一次，后续的分裂都依赖于该分桶并不再更新。\n  - 优点是：只需要计算一次，不需要重复计算。\n  - 缺点是：在经过多次分裂之后，叶结点的样本有可能在很多全局桶中是空的。\n- 局部模式：除了在算法开始时进行分桶，每次拆分之后再重新分桶。\n  - 优点是：每次分桶都能保证各桶中的样本数量都是均匀的。\n  - 缺点是：计算量较大。\n\n为了不让空桶出现，全局模式会构造更多的候选拆分点。而局部模式会更适合构建更深的树。\n\n\n\n### 加权分桶\n\n实际上 XGBoost 不是简单按照样本值进行分位， 而是以二阶导数值作为权重的样本值来分。\n\n假设每个sample的第k维特征，及候选样本的损失函数的二阶偏导数为：$D_k={(x_{1k},h_1),(x_{2k},h_2)⋯(x_{nk},h_n)}$。\n\n定义rank function，\n\n$$ r_k(z) = \\frac{\\sum_{(x, h)\\in D_k,\\ x<z}{h}}{\\sum_{(x, h)\\in D_k}{h}} $$\n\nrank函数可以反应所有第k维特征取值小于z的样本的二阶梯度之和占所有的比例。\n\n我们的目标是找到一个候选的分割节点集 $ {(x_{1k},h_1),(x_{2k},h_2)⋯(x_{nk},h_n)} $，这个集合满足\n\n$$|r_k(s_k, j) - r_k(s_k, j+1)| < \\delta,\\ s_{k1} = \\mathop{min} \\limits_i \\ x_{ik},\\ s_{kl} = \\mathop{max}\\limits_i\\ x_{ik}$$，\n\n其中$x_{i, k}$表示样本i的第k个特征。即：\n\n- 最小的拆分点是所有样本第k维的最小值。\n- 最大的拆分点是所有样本第k维的最大值。\n- 中间的拆分点：选取拆分点，使得相邻拆分点的rank函数值小于 $\\delta$。\n  - 其意义为：第 k维大于等于$s_{k, j}$，小于$s_{k, j+1}$  的样本的h之和，占总的 h之和的比例小于$\\delta$  。\n  - 这种拆分点使得每个桶内的以h为权重的样本数量比较均匀，而不是样本个数比较均匀。\n\n使用h来赋予样本的权重，是因为损失函数可以改写为\n\n<img src=\"【机器学习基础】XGBoost/image-20200722082120815.png\" alt=\"image-20200722082120815\" style=\"zoom:35%;\" />\n\n这可以被看成是关于树函数的是权重为$h_i$ 的加权平方损失函数。\n\n\n\n### Sparsity-aware Split Finding\n\n在实际问题中，稀疏数据是十分常见的，造成数据稀疏的原因一般可以归咎为数据缺失，某个特征出现较多的0值，one hot编码引入的大量0。为了应对缺失值问题，作者提出了一种处理方式：为每个树节点增加一个默认的方向，当x中的相应特征值缺失时，x就被分到这个default方向上。即对于稀疏特征，只需要对有效值进行处理，无效值则采用默认的分裂方向（要么是左，要么是右）。\n\n此外，鉴于0值的特殊性，在XGBoost 算法的实现中，允许对数值0进行不同的处理。可以将数值0视作缺失值，也可以将其视作有效值。\n\n那么如何指定这个默认的方向呢？答案是由模型学习出来。算法如下：\n\n<img src=\"【机器学习基础】XGBoost/image-20200722231753787.png\" alt=\"image-20200722231753787\" style=\"zoom:50%;\" />\n\n可以总结为：首先让所有缺失值都在右子树上，计算出gain，然后让所有缺失值都在左子树上，计算出gain，选取出最大对的gain，即对应着最优的样本划分。\n\n\n\n## 系统设计\n\n### Column Block\n\n算法中最耗时的部分就是预排序，为了节省排序的时间，XGBoost将数据存在内存单元block中，同时在block采用CSC 格式存放(Compressed Column format)，每一列（即每个属性的取值）均升序存放，这样，一次读入数据并排好序后，以后均可使用。在精确贪心算法中，将所有数据均导入内存，算法只要在数据中线性扫描已经预排序过的特征就可以。对于近似算法，可以用多个block(Multiple blocks)分别存储不同的子样本集，多个block可以并行计算。\n\n重要的是，由于将数据按列存储，可以同时访问所有列，那么可以对所有属性同时执行split finding算法，从而并行化split finding.\n\n### Cache-aware Access\n\n略\n\n### Out of Core\n\n略","categories":["机器学习基础"]},{"title":"【CS224N】L8. NMT, seq2seq, attention","url":"/2020/06/20/【CS224N】L8. NMT, seq2seq, attention/","content":"\n# 【CS224N】L8. NMT, seq2seq, Attention\n\n这节课将会：\n\n- 介绍一个新任务：Machine Translation\n- 介绍一个新神经网络架构：sequence to sequence\n- 介绍一个新的神经网络技术：Attention\n\n## Statistical Machine Translation\n\n大都是Rule-based，即有一个对照表dictionary。这里我们只简单介绍，不是重点。\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200620151945250.png\" alt=\"image-20200620151945250\" style=\"zoom:50%;\" />\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200620152018340.png\" alt=\"image-20200620152018340\" style=\"zoom:50%;\" />\n\n这里a是一个对照的基准，用于映射英语与法语之间词、短语级别的对应关系，又可以分为1对1，多对1，1对多，多对多，十分复杂！\n\n## Neural Machine Translation\n\n### Basic Ideas of NMT and seq2seq\n\nNMT的概念最早提出时，同时也带来了seq2seq model。\n\n下面是seq2seq在做预测时候的示意图。encoder对输入的句子进行编码，编码的结果作为decoder hidden states的初始值，decoder每个t时刻预测出来的结果，当做t+1时刻的inputs，t时刻的hidden state会传递给t+1时刻的hidden layer。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200620153218480.png\" alt=\"image-20200620153218480\" style=\"zoom:50%;\" />\n\nNMT可以被视为一个条件语言模型。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200620153918406.png\" alt=\"image-20200620153918406\" style=\"zoom:50%;\" />\n\n### Training NMT\n\nseq2seq的训练过程与预测过程有所不同。训练过程的decoder每一步的输入是groud truth在该timestamp的真实输入，而预测过程是用t-1的预测词来预测t的词。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200620154903428.png\" alt=\"image-20200620154903428\" style=\"zoom:50%;\" />\n\n### Decoding Methods\n\n#### Greedy decoding\n\n到目前，我们在解码的时候采用的思路都是：在每一个时间戳做预测的时候都预测当前最优解，但是这样最终结果不一定是全局最优的。这种方法叫做贪心解码，即greedy decoding。\n\n#### Exhaustive search decoding\n\nExhaustive search decoding意为在每一个timestamp都遍历所有可能的结果，即$|V|$，这样一定可以选择出全局最优解。但是这样的时间复杂度很高，为$O(|V|^T)$。\n\n#### Beam Search Decoding\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621002943340.png\" alt=\"image-20200621002943340\" style=\"zoom:50%;\" />\n\n核心思想：在解码的每一个时间戳的每个分支上，都生成K个candidates，对比当前的所有path，选择K个score最高的，继续解码。下面是Beam search的process。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621003718158.png\" alt=\"image-20200621003718158\" style=\"zoom: 90%;\" />\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621004505085.png\" alt=\"image-20200621004505085\" style=\"zoom: 90%;\" />\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621010214561.png\" alt=\"image-20200621010214561\" style=\"zoom:50%;\" />\n\nBeam search什么时候搜索结束呢？\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621010344131.png\" alt=\"image-20200621010344131\" style=\"zoom:50%;\" />\n\n既然可能会出现提前停止的分支，我们知道短的分支直觉上是会比长的分支score高的，因为长度+1，score会加上一个负数。面对这种情况，我们可以对其正则化。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621010620916.png\" alt=\"image-20200621010620916\" style=\"zoom:35%;\" />\n\n#### BLEU\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621010949683.png\" alt=\"image-20200621010949683\" style=\"zoom:50%;\" />\n\nBLEU的计算方式如下如所示：\n\n首先令 k 是我们要评估的分数的最大 n-gram。即如果 k=4，BELU分数仅计算大小 == 4 的 n-grams ，并忽略大于4的 n-grams 。\n\n对长度是 n 的 grams 的精确度分数：\n\n$$p_n =  count(matched\\ n-grams)\\ /\\ count(n-grams\\ in\\ candidate\\ translation)$$。\n\n最后，令 $w_{n}=1 / 2^{n}$ 是第 n 个 gram 的几何加权。我们简单惩罚的定义为：\n\n$$\\beta=e^{\\min \\left(0,1-\\frac{len_{ref}}{len_{MT}}\\right)}$$\n\n其中 $len_{ref}$ 是参考翻译的句子长度， $len_{MT}$ 是机器翻译的句子长度。\n\n至此，BELU 分数定义为：$$ BELU=\\beta \\prod_{i=1}^{k} p_{n}^{w_{n}} $$.\n\n关于BLEU，再贴上知乎er的理解。\n\n> **BLEU 的大意是比较候选译文和参考译文里的 n-gram（实践中从 unigram 取到 4-gram） 重合程度，重合程度越高就认为译文质量越高。选不同长度的 n-gram 是因为，unigram 的准确率可以用于衡量单词翻译的准确性，更高阶的 n-gram 的准确率可以用来衡量句子的流畅性。**\n>\n> 这是一个**只看中准确率**的指标，就是说更加关心候选译文里的多少 n-gram 是对的（即在参考译文里出现了），而不在乎召回率（参考译文里有哪些 n-gram 在候选译文中没出现）。不过这不算特别严重的问题，因为 BLEU 原论文**建议大家的测试集里给每个句子配备 4 条参考译文**，这样就可以减小语言多样性带来的影响（然而现在很多机器翻译的测试集都是只有 1 条译文，尴尬= =）；另外还有 brevity penalty 来惩罚候选译文过短的情况（候选译文过短在机器翻译中往往意味着漏翻，也就是低召回率）。\n>\n> 作者：Towser\n> 链接：https://www.zhihu.com/question/304798594/answer/567383628\n> 来源：知乎\n> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n## Attention\n\n### Basic Ideas\n\n我们知道，在RNNs encoder里，所有timestamp的信息都堆积在最后一个unit里，这样很容易引起信息存储的瓶颈，严重影响model的效果，为此我们之前讨论了多种解决方案，包括LSTM/GRU/residual net等。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621020606588.png\" alt=\"image-20200621020606588\" style=\"zoom:50%;\" />\n\nAttention机制也可以很好地解决这个问题。\n\nAttention的核心思想：在decoder阶段的每个timestamp都用一个直接与encoder的连接，通过计算“重要性”，来关注一些特定的source sequence。\n\n下面是seq2seq with attention的示意图。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621021230667.png\" alt=\"image-20200621021230667\" style=\"zoom:50%;\" />\n\n<start>的hidden state与encoder每个词的hidden state计算attention score，这里的计算方式常见为dot product。经过softmax归一化，可以得到<start>与每个输入token的注意力分布。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621021541512.png\" alt=\"image-20200621021541512\" style=\"zoom:50%;\" />\n\n\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621021620299.png\" alt=\"image-20200621021620299\" style=\"zoom:50%;\" />\n\n接下来在进行第二个词的预测，与RNN一样，是把t-1时刻的输出当做t时刻的输入，以此类推，直至<END>。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621022037839.png\" alt=\"image-20200621022037839\" style=\"zoom:50%;\" />\n\n接下来是上面过程中涉及到的数学表达式。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621022227921.png\" alt=\"image-20200621022227921\" style=\"zoom:50%;\" />\n\n### Advantages of Attention\n\n1. 解决了rnn的bottleneck problem；\n2. 解决了梯度消失；\n3. 更具有可解释性：通过可视化attention distribution，可以看到decoder的每个词与encoder每个词的相互关系。\n\n### General Attention\n\nAttention可以被用在很多任务，很多架构中。\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621022647674.png\" alt=\"image-20200621022647674\" style=\"zoom:50%;\" />\n\n<img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621022737933.png\" alt=\"image-20200621022737933\" style=\"zoom:50%;\" />\n\n### Several Attention Variants\n\nAttention的变体方式通常是以下几种：\n\n1. 针对计算attention score的方式；\n\n   <img src=\"【CS224N】L8. NMT, seq2seq, attention/image-20200621023050746.png\" alt=\"image-20200621023050746\" style=\"zoom:50%;\" />\n\n2. 针对获得attention distribution的方式；\n\n3. 针对通过weighted sum获取attention output的方式。\n\n\n\n## 后记\n\n整理完这一篇已经三点了。。还是节奏很慢，希望明天有时间看完Transformer。","tags":["CS224N"],"categories":["NLP"]},{"title":"【CS224N】L6/L7. LM, RNN/LSTM/GRU","url":"/2020/06/17/【CS224N】L6_L7. LM, RNN_LSTM_GRU/","content":"\n# 【CS224N】L6_L7. LM, RNN_LSTM_GRU\nL6和L7从Language model出发，讲解了NLP中非常常见的RNN以及各种variants。主要包含以下内容：\n\n- Language model\n- RNN\n- Gradient vanishing/exploding\n- LSTM\n- GRU\n- Bidirectional RNN\n- Deep RNN\n\n## N-gram Language Models\n\n语言模型是NLP中的一类任务，它的目的是预测接下来的词将会是什么，即给定前n词，计算出第n+1个词的概率分布。语言模型的应用比较广泛，比如拼音输入法的智能提示，智能纠错等。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200616235905326.png\" alt=\"image-20200616235905326\" style=\"zoom:50%;\" />\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200616235519607.png\" alt=\"image-20200616235519607\" style=\"zoom:50%;\" />\n\n\n\n在deep learning之前，statistical NLP中有n-gram LM。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200617000941455.png\" alt=\"image-20200617000941455\" style=\"zoom:50%;\" />\n\n接下来是一个具体的4gram LM的例子。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200617001233748.png\" alt=\"image-20200617001233748\" style=\"zoom:50%;\" />\n\n可以看出，4gram无法看到前面语句中的keywords，丢弃太多句子成分，预测只看语料库的概率分布。\n\n除此之外，n-gram LM还有其他问题。\n\n第一个是稀疏性。表现在：\n\n1. 正确的n-gram在训练语料中从未出现过\n\n   解决方案：为每个 w∈V 添加极小数 δ 。这叫做平滑。这使得词表中的每个单词都至少有很小的概率。\n\n2. (N-1) gram在训练预料中从未出现过\n\n   解决方案：后退。即(N-1)gram变为(N-2)gram。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200617001428764.png\" alt=\"image-20200617001428764\" style=\"zoom:50%;\" />\n\n第二个是存储问题。存储所有的n-gram显然会造成大量的空间消耗。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200617233404296.png\" alt=\"image-20200617233404296\" style=\"zoom:50%;\" />\n\n至此为statistical LM，接下来即为neural LM。\n\n\n\n## NNLM\n\n基于前馈神经网络的语言模型是对统计语言模型N-gram的实现。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200802160236396.png\" alt=\"image-20200802160236396\" style=\"zoom:50%;\" />\n\n简单地由三层构成，即输入层，隐藏层，输出层。输入层为第t个词之前的n-1个词，共同构成N-gram，在隐藏层对他们进行拼接。隐藏层激活函数为tanh，然后输出层用softmax输出。\n\n改进方向：\n\n- 只对一部分输出进行梯度传播，如了呢的这种infomation比较少的词汇；\n\n- 引入先验知识，如词性；\n\n- 解决一词多义问题；\n\n- 加速softmax层的计算。softmax层的维度是 $|V|$，即词表大小（1w以上），计算会十分缓慢。\n\n  - 层次softmax；\n  - 负采样；\n\n  \n\n## RNNLM\n\n**Unlike n-gram which only focus on nearby words, Recurrent Neural Networks (RNN) are capable of conditioning the model on all previous words in the corpus.**\n\n### RNN model\n\nRNN核心思想是：用了同一个参数矩阵W ($W_h, W_e$都不变)在各个时间上共享，共同训练，经过最后一个时间步计算加上反向传播后得到的W，会在infer过程的各层中共享。\n\n<u>***值得注意的是，在各个深度学习框架里，对RNN的实现有区别。Keras采用padding的方式，对批量句子进行按最长句子长度补全长度，Pytorch则是dynamic的方式***</u>\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618202714992.png\" alt=\"image-20200618202714992\" style=\"zoom:50%;\" />\n\n下面是RNN的例子。\n\n$x$是输入的词或者词的index，经过E后得到其word embedding $e^n$，作为模型每一个时间戳$t$的输入。其后该输入（乘上一个参数$W_e$）、时间$t-1$的隐藏层输出（乘上参数$W_h$）一起，构成时间t的隐藏层输入，作用一个非线性的激活函数，如$tanh$，即可得到时间$t$的隐藏层输出。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618203119586.png\" alt=\"image-20200618203119586\" style=\"zoom:50%;\" />\n\n**RNN 的优点**\n\n- 可以处理任意长度的输入（并不）；\n- 在时间t的计算会用到很长时间之前的信息；\n- 模型的大小不随着输入长度的增加而变大；\n\n**RNN的缺点**\n\n- 循环的计算实际上很慢，顺序的计算无法并行化；\n\n- 在实际应用中，很难catch到比较久之前的信息。\n\n\n\n### 损失函数\n\nRNN的损失函数一般是交叉熵损失函数（cross entropy loss）。\n\n<u>？？？</u>\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618212812170.png\" alt=\"image-20200618212812170\" style=\"zoom:45%;\" />\n\n因此对于一个长度为T的输入，整体的损失函数即为：\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618212929299.png\" alt=\"image-20200618212929299\" style=\"zoom:40%;\" />\n\n### Evaluation on LM\n\n语言困惑度 $PP(·)$ \n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618222820124.png\" alt=\"image-20200618222820124\" style=\"zoom:50%;\" />\n\n\n\n即如果对其取自然对数，我们可以得到如下关系: $P(S)\\ = \\ e^L$。 因此在计算loss的时候，就可以顺手计算出来困惑度的值，但是需要注意，由于大部分情况下我们会使用batch来训练，这样就会有padding，因此计算困惑度的时候要去掉padding。\n\n\n\n### 反向传播，梯度弥散，梯度爆炸\n\n这张slide展示的是一个general RNN。在基本结构的基础上添加了target sequence $y^t$，与$o^t$计算CELoss，得到$L^t$。\n\n对L的求梯度过程：L对o求梯度，o对h求梯度，递归地进行 {h对之前的h求梯度，之前的h对W求梯度}。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618233214485.png\" alt=\"image-20200618233214485\" style=\"zoom:50%;\" />\n\n这里就引出了梯度爆炸和梯度弥散的问题。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618233430772.png\" alt=\"image-20200618233430772\" style=\"zoom:50%;\" />\n\n接下来是对梯度弥散和梯度爆炸的数学解释。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200618234335751.png\" alt=\"image-20200618234335751\" style=\"zoom:50%;\" />\n\n为什么梯度弥散会在RNN中是一个问题呢？\n\n1. 远处的梯度消失了，会导致模型权重的更新只依赖于近处的影响；\n\n2. 梯度可以被认为是一种过去对现在影响力的衡量标准。如果经过长距离的传播后，梯度变得很小，那么我们无法分辨是因为我们的参数设计的不对，还是因为两者之间确实没有什么依赖性。\n\n#### 梯度爆炸的解决方式：梯度裁剪\n\n梯度裁剪被用于解决梯度爆炸问题。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619005143152.png\" alt=\"image-20200619005143152\" style=\"zoom:50%;\" />\n\n#### 梯度弥散的解决方式\n\n1. 残差连接\n\n   <img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619005450432.png\" alt=\"image-20200619005450432\" style=\"zoom:50%;\" />\n\n2. 密集连接\n\n   <img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619005519866.png\" alt=\"image-20200619005519866\" style=\"zoom:50%;\" />\n\n3. RNN的变体\n\n   GRU and LSTM.\n\n## LSTM\n\n选择性记住，选择性忘记，这就是LSTM。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619220712817.png\" alt=\"image-20200619220712817\" style=\"zoom:50%;\" />\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619224010692.png\" alt=\"image-20200619224010692\" style=\"zoom:50%;\" />\n\n\n\nLSTM的结构使得RNN可以更容易的保存住很久之前的信息，因为有forget gate来选择哪些信息留下，哪些舍弃。但是LSTM**<u>无法根本性解决</u>**梯度弥散问题。\n\n## GRU\n\nGRU，全称为Gated Recurrent Units。GRU可以视为对LSTM的简化。LSTM可以是一个默认使用的model，但是如果想让训练更快，那么可以用GRU代替。数据集大的时候用LSTM，数据集小的时候用GRU。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619222102753.png\" alt=\"image-20200619222102753\" style=\"zoom:50%;\" />\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619223807308.png\" alt=\"image-20200619223807308\" style=\"zoom:50%;\" />\n\n## bidirectional RNN\n\n在情感分类任务中，后面出现的词可能会对前面出现的词的情绪造成影响。例如：the movie was terribly exciting. terribly可能会是一个消极的信号，但是结合后面的exciting，就是积极的。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619230406503.png\" alt=\"image-20200619230406503\" style=\"zoom:50%;\" />\n\n此时可以使用bidirectional RNN来解决。bidirectional RNN中，正向和反向的hidden state会被concatenate在一起。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619230708537.png\" alt=\"image-20200619230708537\" style=\"zoom:50%;\" />\n\nbidirectional RNN只有在句子整体都可以被访问到的情况下才适用，不适合生成模型。bidirectional RNN是十分强大的，如果可以获取整个的输入句子，那么应该默认使用bidirectional RNN。BERT就是bidirectional的architecture。\n\n## Multi-layer RNNs\n\ndeep RNN可以处理更为复杂的输入，其中lower RNNs 计算 lower-level features，higher RNNs 计算 higher-level features。下面是deep RNN的示意图。\n\n<img src=\"【CS224N】L6_L7. LM, RNN_LSTM_GRU/image-20200619231318989.png\" alt=\"image-20200619231318989\" style=\"zoom:50%;\" />\n\n高性能的RNN一般都是deep的，但是又不像DNN/CNN那样deep。\n\n例如，对于NMT来说，encoder RNN用2-4层，decoder RNN用4层。\n\n## Reference\n\n- [详解深度学习中的梯度消失、爆炸原因及其解决方法](https://zhuanlan.zhihu.com/p/33006526) \n\n\n\n\n\n***<u>后记：这两节课的学习和总结用了一周的时间，节奏还是比较慢的。</u>***","tags":["CS224N"],"categories":["NLP"]},{"title":"集成学习","url":"/2020/06/11/集成学习/","content":"# 【ML】集成学习\n\n1. 集成学习`ensemble learning`是通过构建并结合多个学习器来完成学习任务。其一般结构为：\n\n   - 先产生一组“个体学习器”（`individual learner`) 。个体学习器通常由一种或者多种现有的学习算法从训练数据中产生。\n\n     - 如果个体学习器都是从某一种学习算法从训练数据中产生，则称这样的集成学习是同质的`homogenerous`。\n\n       此时的个体学习器也称作基学习器`base learner`，相应的学习算法称作基学习算法。\n\n     - 如果个体学习器是从某几种学习算法从训练数据中产生，则称这样的集成学习是异质的`heterogenous` 。\n\n   - 再使用某种策略将它们结合起来。集成学习通过将多个学习器进行组合，通常可以获得比单一学习器显著优越的泛化性能。\n\n2. 通常选取个体学习器的准则是：\n\n   - 个体学习器要有一定的准确性，预测能力不能太差。\n   - 个体学习器之间要有多样性，即学习器之间要有差异。\n\n3. 通常基于实际考虑，往往使用预测能力较强的个体学习器（即强学习器，与之对应的为弱学习器）。\n\n   强学习器的一个显著的好处就是可以使用较少数量的个体学习器来集成就可以获得很好的效果。\n\n4. 根据个体学习器的生成方式，目前的集成学习方法大概可以分作两类：\n\n   - 个体学习器之间存在强依赖关系、必须串行生成的序列化方法，每一轮迭代产生一个个体学习器。其中以`Boosting`为代表。\n   - 个体学习器之间不存在强依赖关系、可同时生成的并行化方法。其中以`Bagging`和随机森林`Random Forest`为代表。\n\n\n\n"},{"title":"【机器学习基础】 Lasso & Ridge regression, 正则化","url":"/2020/05/05/【机器学习基础】Lasso & Ridge regression/","content":"\n\nSlides的内容来自HKUST的Prof. Nevin L. ZHANG.\n\n<img src=\"【机器学习基础】Lasso & Ridge regression/1.png\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】Lasso & Ridge regression/3.png\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】Lasso & Ridge regression/2.png\" style=\"zoom:50%;\" />\n\n\n\n## Note\n\n- 这两个都是正则化的手段。LASSO是基于回归系数的一范数，Ridge是基于回归系数的二范数的平方;\n\n- 根据Hastie, Tibshirani, Friedman的经典教材，如果模型中有很多变量对模型都有些许影响，那么用Ridge；如果你的模型中只有少量变量对模型很大影响，那么用LASSO。LASSO可以使得很多变量的系数为0（相当于降维），特征选择，可以简化模型；而Ridge不会进行特征选择;\n- 因为Ridge计算起来更快，所以当数据量特别大的时候，更倾向于用Ridge;\n- 最万能的方法是用LASSO和Ridge都试一试，比较两者Cross Validation的结果;\n- 最后补充一下，你也可以尝试一下两者的混合，Elastic Net。","categories":["机器学习基础"]},{"title":"Linux常用指令速查","url":"/2020/05/03/linux指令/","content":"\n### awk\n\n```bash\nawk '{print $0}' file    #打印所有列\nawk '{print $1}' file  #打印第一列\nawk '{print $1, $3}' file   #打印第一和第三列\ncat file | awk '{print $3, $1}'   #打印第三列和第一列，注意先后顺序。\ncat file | awk '{print $3, $NF}' #打印第三列和最后一列\nawk -F \":\" '{print $1, $3}'  #以“:”为分隔符分割列，然后打印第一列和第三列\nawk '{for(i=13;i<=NF;i++) printf $i\" \";printf \"\\n\"}' file #打印第13列之后的所有\n```\n\n\n\n### paste\n\npaste会把每个文件以列对列的方式，一列列地加以合并。\n\n```bash\n文件： pas1\nID897\nID666\nID982\n文件： pg pas2\nP.Jones\nS.Round\nL.Clip\n\n1. 基本paste命令将pas1和pas2两文件粘贴成两列：\n    > paste pas1 pas2\n    ID897   P.Jones\n    ID666   S.Round\n    ID982   L.Clip\n2. 通过交换文件名即可指定哪一列先粘：\n    > paste pas2 pas1\n    P.Jones ID897\n    S.Round ID666\n    L.Clip ID982\n3. 要创建不同于空格或tab键的域分隔符，使用-d选项。下面的例子用冒号做域分隔符。\n    > paste -d: pas2 pas1\n    P.Jones:ID897\n    S.Round:ID666\n    L.Clip:ID982\n4. 要合并两行，而不是按行粘贴，可以使用-s选项。下面的例子中，第一行粘贴为ID号，第二行是名字。\n    > paste -s pas1 pas2\n    ID897   ID666   ID982\n    P.Jones S.Round L.Clip\n```","tags":["Linux"],"categories":["Linux"]},{"title":"【机器学习基础】GBDT","url":"/2020/03/24/【机器学习基础】GBDT/","content":"\n### 概述\n\nGBDT全称为Gradient Boosting Decison Tree，是boosting家族的一员，其弱学习器限定只能用CART回归树模型。在GBDT的迭代中，假设我们前一轮迭代得到的强学习器是$f_{𝑡−1}(𝑥)$, 损失函数是$𝐿(𝑦,𝑓_{𝑡−1}(𝑥))$，我们本轮迭代的目标是找到一个CART回归树模型的弱学习器$ℎ_𝑡(𝑥)$，最小化本轮的损失函数$$ L(y,f_t(x)=L(y, f_{t−1}(x)+h_t(x))$$也就是说，本轮迭代找到决策树，要让样本的损失尽量变得更小。\n\nGBDT的思想可以用一个通俗的例子解释，假如有个人30岁，我们首先用20岁去拟合，发现损失有10岁，这时我们用6岁去拟合剩下的损失，发现差距还有4岁，第三轮我们用3岁拟合剩下的差距，差距就只有一岁了。如果我们的迭代轮数还没有完，可以继续迭代下面，每一轮迭代，拟合的岁数误差都会减小。最终把每棵树的结论加起来，本例中即为 20+6+3+1 = 30。实际工程中，GBDT是计算负梯度，用负梯度近似残差。\n\n### GBDT的负梯度拟合\n\n提升树中，当损失函数是平方损失函数和指数损失函数时，每一步优化都很简单。因为平方损失函数和指数损失函数的求导非常简单。当损失函数是一般函数时，往往每一步优化不是很容易。针对这个问题，`Freidman`提出了梯度提升算法：用损失函数的负梯度来拟合本轮损失的近似值，进而拟合一个CART回归树。\n\n<img src=\"image-20200727203716005.png\" alt=\"image-20200727203716005\" style=\"zoom:55%;\" />\n\n","categories":["机器学习基础"]},{"title":"【机器学习基础】决策树","url":"/2020/03/17/【机器学习基础】决策树/","content":"\n\n\n### 基本概念\n\n1. 决策树是极其接近人类思维的一种机器学习算法，没有包含很复杂的数学模型。其本质是从训练数据集中归纳出一条分类规则；\n\n2. 决策树的判别过程可以视作 IF-THEN 模型，即：根据样本某个特征的取值，不断地判别下去，对数据集做划分，直至归类成功；IF-THEN 是互斥且完备的，即：每一个样本点都被一条且仅被一条决策的路径所覆盖；\n3. 决策树是树型结构，其根节点为全部样本点的集合，中间结点表示某一个特征或者属性，叶子结点表示某一个类；\n\n4. 决策树学习通常包括三个步骤：特征选择、决策树生成以及决策树的剪枝。\n\n\n\n### 特征选择\n\n既然决策树只是在不停地做 IF-THEN，那么问题就出现了：一个样本有n个属性的话，如何选择属性的优先性呢？\n\n**我们通常根据信息增益或者信息增益比来做特征选择，选择数值更大的属性作为划分依据。**\n\n那么什么是信息增益/信息增益比？这里，我们来了解以下概念。\n\n#### Concept_1 信息熵\n\n1. 直观理解：熵描述了（系统/随机变量的）不确定性。熵越大，不确定性越大，信息含量越少。\n2. 公式： $$H(X)=-\\sum_{i=1}^{n}p_{i}log_{2}p_{i}$$\n\n3. 熵仅依赖X的分布，与X的取值无关，因此又可以记作：$H(p)=-\\sum_{i=1}^{n}p_{i}log_{2}p_{i}$\n\n#### Concept_2 条件熵\n\n1. $H(Y|X)$ 定义为：在X给定条件下，Y的条件概率分布的熵 对X的数学期望；\n\n2. 公式：$$H(Y|X)=\\sum_{i=1}^{n}p_{i}H(Y|X=x_{i})$$\n\n信息熵里的 $p_{i}$ 的计算是根据 当前样本集的分类情况，依据概率分布来计算。\n而条件熵里的 $p_{i}$ 的计算是根据 当前样本集按照某个属性划分后，每一个划分占总体的比例来计算\n举栗请看《统计学习方法》P62 例5.2 \n\n#### Concept_3 信息增益\n\n特征A对数据集D的信息增益$g(D, A)$定义为：集合D的熵$H(D)$与特征A给定条件下D的经验熵$H(D|A)$之差，\n\n即：$$g(D, A)=H(D)-H(D|A)$$\n\n信息增益的符号，在有些地方也用gain()表示。\n\n#### Concept_4 信息增益比\n\n特征A对数据集D的信息增益比$g_{R}\\left ( D, A\\right )$定义为：\n\n信息增益$g(D, A)$与训练集D关于特征A的值的熵$H_{A}(D)$的比值. 即：$$g_{R}\\left ( D, A\\right )= \\frac{g\\left ( D, A \\right )}{H_{A}(D)}$$\n\n其中，$$H_{A}(D)=-\\sum_{i=1}^{n}\\frac{D_{i}}{D}log_{2}\\frac{D_{i}}{D}$$\n\n$D_{i}$ 是根据属性A划分出的第i个子集.\n\n\n\n### 决策树生成\n\n本节包含ID3、C4.5和CART算法，CART放在[CART决策树](#cartdt)部分学习。\n\n#### ID3算法\n\nID3算法就是在决策树的各个节点上应用信息增益来选择特征，递归的构建决策树。\n\n具体来讲：\n\n1. 从根节点开始，对节点计算所有可能的特征的信息增益；\n\n2. 选择增益最大的特征作为节点的特征，以该特征的不同取值进行划分，建立子节点；\n\n3. 递归下去，直到信息增益很小（人为地设置一个阈值）或者无特征为止。\n\n缺点：ID3会对 包含类别较多 的特征有选择的偏向性，因此提出c4.5算法。\n\n#### C4.5算法\n\n与ID3的区别：\n\n1. 在特征选择时，先从候选属性中选择信息增益高于平均水平的属性，再从中选择信息增益率最高的属性；\n\n2. 此处的阈值是信息增益比的最小值。\n\n\n\n### 剪枝策略\n\n#### 为何剪枝：\n\n决策树生成算法根据训练集递归的生成了决策树，但是这样产生的树往往对训练数据集的分类很准确，却对测试数据集却没那么准确，即发生了过拟合现象。因此我们需要把复杂的树简单化。\n\n#### 预剪枝\n\n在选定了划分属性后，我们提出问题：是否应该进行这个划分？这就是预剪枝。\n\n预剪枝就是在完全正确分类训练集之前，较早地停止树的生长。\n\n具体在什么时候停止决策树的生长有多种不同的方法:\n\n1. 最为简单的方法：在决策树到达一定高度的情况下就停止树的生长；\n2. 定义一个阈值，当达到某个节点的实例个数小于阈值时就可以停止决策树的生长;\n3. 一种更为普遍的做法是计算划分前后系统精度的变化。如果更加精确，则允许划分，否则不允许（西瓜书4.31.节即采用本策略）。\n\n优点降低了过拟合，减少训练时间，***缺点容易带来欠拟合***。\n\n#### 后剪枝\n\n后剪枝技术要比预剪枝技术用得更加广泛。此处着重介绍。\n\n**方法1 - Reduced Error Pruning（西瓜书）**\n\n对于决策树T的每棵非叶子树S , 以“深度优先”的顺序，尝试用叶子替代这棵子树. 如果 S 被叶子替代后形成的新树关于数据集D的分类准确率等于或大于原树关于相同数据集D的准确率, 则用叶子替代子树S。\n\n**方法2 - 极小化决策树整体的损失函数（统计学习方法）**\n\n损失函数：\n\n$$C_α(T) = C(T)+α|T|=\\sum_{t=1}^{|T|}N_tH_t(T)+α|T|$$\n\n$$H_t(T)=−\\sum_{k}\\frac{N_{tk}}{N_t}log\\frac{N_{tk}}{N_t}$$ \n\n其中，$|T|$是树$T$的叶节点个数，$t$是其中一个结点，$N_t$是这个结点的样本个数，$H_t(T)$是这个结点的经验熵（就是普通的熵）。$C(T)$表示模型对训练数据的预测误差，即模型与训练数据的拟合程度， $|T|$是模型的复杂程度，$\\alpha$用来控制两者之间的关系。使用叶子结点的熵作为的模型的评价是因为：如果分到该叶节点的所有样本都属于同一类，不确定数量 = 不确定度 * 样本数量，那么分类效果最好，熵最小。\n\n在这里我存在疑问：\n\n叶结点上为什么存在k类样本点？即在该叶结点上，所有类别标签应该都是一致的。\n\n可能解释：\n\n1. 在该叶结点上没有足够的特征信息再把不一致的标签分开；\n2. 存在噪声点，何谓噪声，在类群中有极少个与类群不符的标签。\n\n\n\n###  <span id=\"cartdt\">CART决策树</span>\n\nCART决策树全称为classification and regression tree，CART假设决策树是二叉树，内部结点特征的取值为是和否，等价于递归地二分每个特征。\n\n#### CART 回归树\n\n见[CART回归树原理及示例](https://blog.csdn.net/aaa_aaa1sdf/article/details/81588382)。\n\n#### CART分类树\n\n分类树用Gini index选择最优的特征，同时决定该特征下的最优二分点。\n\n#### Concept_5 Gini index\n\n假设有K个类，样本点属于第k类的概率为$p_k$，则概率分布的Gini index定义为：\n\n$$Gini(p) = \\sum_{k=1}^{K}p_k(1-p_k)=1-\\sum_{k=1}^{K}p_k^2$$\n\n对于二分类问题，假设样本点是第一类的概率为$p$，则概率分布的Gini index为：\n\n$$Gini(p) = 2p(1-p)$$\n\n对于给定的样本集合D，把概率写作数量的比值，其Gini index为：\n\n$$Gini(D) = 1-\\sum_{k=1}^{K}(\\frac{|C_k|}{|D|})^2$$\n\n如果样本集合D根据特征A是否取某一可能的值a被分割成了$D_1$和$D_2$两个部分，则在特征A的条件下，集合D的基尼指数定义为：\n\n$$Gini(D, A)=\\frac{|D_1|}{|D|}Gini(D_1) + \\frac{|D_2|}{|D|}Gini(D_2)$$\n\n$Gini(D)$代表集合$D$的不确定性，$Gini(D, A)$表示经$A=a$分割后集合$D$的不确定性。Gini index越大，样本的不确定性就越大。\n\n#### CART分类树的生成\n\n伪代码总结为：\n\n```python\nfor  A in feature space:\n\tfor a in A.values:\n\t\tcalculateGini(A = a)\nchoose the lowest Gini index\n```\n\n《统计学习方法》相关描述为：\n\n<img src=\"【机器学习基础】决策树/image-20200318104650131.png\" alt=\"image-20200318104650131\" style=\"zoom: 50%;\" />\n\n<img src=\"【机器学习基础】决策树/image-20200318105140830.png\" alt=\"image-20200318105013644\" style=\"zoom:50%;\" />\n\n#### CART剪枝\n\n基本思路：CART剪枝算法从“完全生长”的决策树的底端剪去一些子树，使决策树变小（模型变简单），从而能够对未知数据有更准确的预测。CART剪枝算法由两步组成：1. 首先从生成算法产生的决策树$T_0$底端开始不断剪枝，直到$T_0$的根结点，形成一个子树序列{$T_0$,$T_1$,...,$T_n$}；2. 然后通过交叉验证法在独立的验证数据集上对子树序列进行测试，从中选择最优子树。\n\n接下来截取统计学习方法的内容。\n\n<img src=\"【机器学习基础】决策树/image-20200318111527018.png\" alt=\"image-20200318111527018\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】决策树/image-20200318111742773.png\" alt=\"image-20200318111742773\" style=\"zoom:50%;\" />\n\n<img src=\"【机器学习基础】决策树/image-20200318113410309.png\" alt=\"image-20200318113410309\" style=\"zoom:50%;\" />\n\n#### CART剪枝的原理思考\n\nloss function的定义为：\n\n$$C_α(T) = C(T)+α|T|=\\sum_{t=1}^{|T|}N_tH_t(T)+α|T|$$\n\n对其进行变形：\n\n$$C_α(T) =\\sum_{t=1}^{|T|}(N_tH_t(T)+α)$$\n\n由此看出，衡量损失函数大小的真正贡献在于每一棵子树的叶结点，叶结点不确定次数的累加并加个常数$\\alpha $就是决策树整体的损失函数。\n\n","categories":["机器学习基础"]},{"title":"【NLP】对话生成任务中的数据清理","url":"/2020/02/17/【NLP】对话生成任务中的数据清理/","content":"\n在本次对话生成的任务中，需要对微博数据进行清理，去除其中不应feed到网络中的字符。主要包括以下：\n\n\n\n1. 颜文字；\n2. emoji；\n3. 相同且重复多次的正常标点只保留一个；\n4. 不同且重复多次的异常标点删掉；\n5. 话题标识删掉；\n6. @/via/http:后缀/cite删掉；\n\n\n\n下面是代码部分。在处理时因为赶时间，直接采用了暴力破解，只是在执行的先后顺序上做了一些调整，这里***MARK***，以后有时间做一下改进。\n\n```python\nimport jieba\nimport re\n\nduels = [x + y for x in list('。，!？！？:.（）()【】,《》\\'\\\"、,') \n                for y in list('。，!？！？:.（）()【】,《》\\'\\\"、,')]\ndef handle_symbol(text, duels):\n    '''\n        1. 删除重复的标点符号，只保留一个；\n        2. 删除特殊符号；\n    '''\n    remove = list('ノ¯︶ーσ･з∠~〜*&%$-_+=＊ｰ ̀ ́；●ヾД≤≥ε┏゜ロ┛□▔﹏∇ψ❤三 ڡ ♂ㄒ;∂‸Ծˋ๑ºั`·ﾟ\\\n                ゝ[]○▽￥←┴・｀.「﹃『』」∩ヽ ﾟ∀ｏ`´╭╮【Σっ★╥¬☆＜⌒ﾉ】→↑°╰╯┴x•ㅂ…|\\/^<\\\n                >口︵—≧≦⊙ω∑√')\n    for r in remove:\n        while r in text:\n            text = text.replace(r,\"\")\n    for d in duels:\n        while d in text:\n            if d[0] == d[1]: text = text.replace(d,d[0])\n            else: text = text.replace(d,\"\")\n    while text[0] in list('。，!？！？:.（）()【】,《》\\'\\\"、,'):\n        text = text[1:]\n    return text\ndef rm_ref(text):\n    '''\n        删除@/via/\n    '''\n    text = text.split(\"分享自via:\")[0] if \"分享自via:\" in text else text\n    text = text.split(\"（图via\")[0] if \"（图via\" in text else text\n    text = text.split(\"图via\")[0] if \"图via\" in text else text\n    text = text.split(\"@\")[0] if \"@\" in text else text\n    text = text.split(\"(via\")[0] if \"(via\" in text else text\n    text = text.split(\"\")[0] if \"via\" in text else text\n    text = text.split(\"by:\")[0] if \"via\" in text else text\n    text = text.split(\"(by\")[0] if \"via\" in text else text\n    return text\n\ndef filter_emoji(desstr,restr=''):  \n    '''\n        过滤emoji\n    '''   \n    try:  \n        res= re.compile(u'[\\U00010000-\\U0010ffff]')  \n    except re.error:  \n        res = re.compile(u'[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]')  \n    return res.sub(restr, desstr)\n\ndef rm_cite(text):\n    '''\n        删除http:/##/\n    '''\n    text = text.replace(\"http:\", \"\")\n    text = re.sub(r'#.*#', '', text)\n    return text\n\ntarget = open(\"after_cleaned_test.txt\", \"w\")\nwith open(\"./tweets_cleaned.txt\", 'r') as f:\n    for line in f:\n        try:\n            line = line.strip().split(\"\\t\")\n            # 清洗\n            line[3] = rm_ref(line[3])\n            line[3] = filter_emoji(line[3])\n            line[3] = rm_cite(line[3])\n            line[3] = handle_symbol(line[3], duels)\n            line[7] = rm_ref(line[7])\n            line[7] = filter_emoji(line[7])\n            line[7] = rm_cite(line[7])\n            line[7] = handle_symbol(line[7], duels)\n            \n            # 分词\n            line[3] = \" \".join(jieba.cut(line[3], cut_all=False))\n            line[7] = \" \".join(jieba.cut(line[7], cut_all=False))\n            target.write(\"\\t\".join(line) + \"\\n\")\n        except:\n            continue\n\n```","tags":["EMNLP2020"],"categories":["NLP"]},{"title":"【NLP】统计学习的语言模型","url":"/2020/02/15/【NLP】统计学习的语言模型/","content":"\n\n\n# 语言模型\n\n一段自然语言文本可以看作是一个离散时间序列，给定一个长度为$T$的词的序列$w_1, w_2, \\ldots, w_T$。\n语言模型的目标就是评估该序列是否合理，即计算该序列的概率：\n\n$$\nP(w_1, w_2, \\ldots, w_T) \n$$\n\n\n本节我们介绍基于统计的语言模型，主要是$n$元语法（$n$-gram）。在后续内容中，我们将会介绍基于神经网络的语言模型。\n\n\n\n## 统计学习的语言模型\n\n\n假设序列$w_1, w_2, \\ldots, w_T$中的每个词是依次生成的，我们有\n\n\n$$\n\\begin{align*}\nP(w_1, w_2, \\ldots, w_T)\n&= \\prod_{t=1}^T P(w_t \\mid w_1, \\ldots, w_{t-1})\\\\\n&= P(w_1)P(w_2 \\mid w_1) \\cdots P(w_T \\mid w_1w_2\\cdots w_{T-1})\n\\end{align*}\n$$\n\n\n例如，一段含有4个词的文本序列的概率\n\n\n$$\nP(w_1, w_2, w_3, w_4) =  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_1, w_2, w_3).\n$$\n\n\n语言模型的参数就是词的概率以及给定前几个词情况下的条件概率。设训练数据集为一个大型文本语料库，如维基百科的所有条目，词的概率可以通过该词在训练数据集中的相对词频来计算，例如，$w_1$的概率可以计算为：\n\n\n$$\n\\hat P(w_1) = \\frac{n(w_1)}{n}\n$$\n\n\n其中$n(w_1)$为语料库中以$w_1$作为第一个词的文本的数量，$n$为语料库中文本的总数量。\n\n类似的，给定$w_1$情况下，$w_2$的条件概率可以计算为：\n\n\n$$\n\\hat P(w_2 \\mid w_1) = \\frac{n(w_1, w_2)}{n(w_1)}\n$$\n\n其中$n(w_1, w_2)$为语料库中以$w_1$作为第一个词，$w_2$作为第二个词的文本的数量。\n\n***注意，这里的n指的不是w1,w1w2单词出现的次数，而是以w1, w1w2开头的文本数量。***\n\n\n\n## n元语法\n\n序列长度增加，计算和存储多个词共同出现的概率的复杂度会呈指数级增加。$n$元语法通过马尔可夫假设简化模型，马尔科夫假设是指一个词的出现只与前面$n$个词相关，即$n$阶马尔可夫链（Markov chain of order $n$），如果$n=1$，那么有$P(w_3 \\mid w_1, w_2) = P(w_3 \\mid w_2)$。基于$n-1$阶马尔可夫链，我们可以将语言模型改写为\n\n\n$$\nP(w_1, w_2, \\ldots, w_T) = \\prod_{t=1}^T P(w_t \\mid w_{t-(n-1)}, \\ldots, w_{t-1}) .\n$$\n\n\n以上也叫$n$元语法（$n$-grams），它是基于$n - 1$阶马尔可夫链的概率语言模型。例如，当$n=2$时，含有4个词的文本序列的概率就可以改写为：\n\n\n$$\n\\begin{align*}\nP(w_1, w_2, w_3, w_4)\n&= P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_1, w_2, w_3)\\\\\n&= P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_2) P(w_4 \\mid w_3)\n\\end{align*}\n$$\n\n\n当$n$分别为1、2和3时，我们将其分别称作一元语法（unigram）、二元语法（bigram）和三元语法（trigram）。例如，长度为4的序列$w_1, w_2, w_3, w_4$在一元语法、二元语法和三元语法中的概率分别为\n\n\n$$\n\\begin{aligned}\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2) P(w_3) P(w_4) ,\\\\\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_2) P(w_4 \\mid w_3) ,\\\\\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_2, w_3) .\n\\end{aligned}\n$$\n\n当$n$较小时，$n$元语法往往并不准确。例如，在一元语法中，由三个词组成的句子“你走先”和“你先走”的概率是一样的。然而，当$n$较大时，$n$元语法需要计算并存储大量的词频和多词相邻频率。\n\n\n\n***思考：$n$元语法可能有哪些缺陷?***\n\n1. 参数空间过大；\n2. 数据稀疏。\n\n\n\n## 语言模型数据集\n### 读取数据集\n\n```python\nwith open('jaychou_lyrics.txt') as f:\n    corpus_chars = f.read()\nprint(len(corpus_chars))\nprint(corpus_chars[: 40])\ncorpus_chars = corpus_chars.replace('\\n', ' ').replace('\\r', ' ')\ncorpus_chars = corpus_chars[: 10000] # 只保留前10000个字符\n\n# output\n# 63282\n# 想要有直升机\n# 想要和你飞到宇宙去\n# 想要和你融化在一起\n# 融化在宇宙里\n# 我每天每天每\n```\n\n### 建立字符索引\n\n```python\nidx_to_char = list(set(corpus_chars)) # 去重，得到索引到字符的映射\nchar_to_idx = {char: i for i, char in enumerate(idx_to_char)} # 字典推导式，构造字符到索引的映射\nvocab_size = len(char_to_idx)\nprint(vocab_size)\n\ncorpus_indices = [char_to_idx[char] for char in corpus_chars]  # 将每个字符转化为索引，得到一个索引的序列\nsample = corpus_indices[: 20]\nprint('chars:', ''.join([idx_to_char[idx] for idx in sample]))\nprint('indices:', sample)\n\n# output:\n# 1027\n# chars: 想要有直升机 想要和你飞到宇宙去 想要和\n# indices: [519, 525, 36, 664, 964, 16, 522, 519, 525, 184, 784, 828, 218, 371, 618, 889, 522, 519, 525, 184]\n\n# 定义函数`load_data_jay_lyrics`，在后续章节中直接调用。\ndef load_data_jay_lyrics():\n    with open('jaychou_lyrics.txt') as f:\n        corpus_chars = f.read()\n    corpus_chars = corpus_chars.replace('\\n', ' ').replace('\\r', ' ')\n    corpus_chars = corpus_chars[0:10000]\n    idx_to_char = list(set(corpus_chars))\n    char_to_idx = dict([(char, i) for i, char in enumerate(idx_to_char)])\n    vocab_size = len(char_to_idx)\n    corpus_indices = [char_to_idx[char] for char in corpus_chars]\n    return corpus_indices, char_to_idx, idx_to_char, vocab_size\n```\n\n\n\n## 时序数据的采样\n\n在训练中我们需要每次随机读取小批量样本和标签。与之前章节的实验数据不同的是，时序数据的一个样本通常包含连续的字符。假设时间步数为5，样本序列为5个字符，即“想”“要”“有”“直”“升”。该样本的标签序列为这些字符分别在训练集中的下一个字符，即“要”“有”“直”“升”“机”，即$X$=“想要有直升”，$Y$=“要有直升机”。\n\n现在我们考虑序列“想要有直升机，想要和你飞到宇宙去”，如果时间步数为5，有以下可能的样本和标签：\n\n- $X$：“想要有直升”，$Y$：“要有直升机”\n- $X$：“要有直升机”，$Y$：“有直升机，”\n- $X$：“有直升机，”，$Y$：“直升机，想”\n- ...\n- $X$：“要和你飞到”，$Y$：“和你飞到宇”\n- $X$：“和你飞到宇”，$Y$：“你飞到宇宙”\n- $X$：“你飞到宇宙”，$Y$：“飞到宇宙去”\n\n可以看到，如果序列的长度为$T$，时间步数为$n$，那么一共有$T-n$个合法的样本，**但是这些样本有大量的重合**，我们通常采用更加高效的采样方式。我们有两种方式对时序数据进行采样，分别是随机采样和相邻采样。\n\n### 随机采样\n\n下面的代码每次从数据里随机采样一个小批量。其中批量大小`batch_size`是每个小批量的样本数，`num_steps`是每个样本所包含的时间步数。\n在随机采样中，每个样本是原始序列上任意截取的一段序列，相邻的两个随机小批量在原始序列上的位置不一定相毗邻。\n\n![1](统计学习的语言模型/1.png)\n\n```python\nimport torch\nimport random\ndef data_iter_random(corpus_indices, batch_size, num_steps, device=None):\n    # 减1是因为对于长度为n的序列，X最多只有包含其中的前n - 1个字符\n    num_examples = (len(corpus_indices) - 1) // num_steps  # 下取整，得到不重叠情况下的样本个数\n    example_indices = [i * num_steps for i in range(num_examples)]  # 每个样本的第一个字符在corpus_indices中的下标\n    random.shuffle(example_indices)\n\n    def _data(i):\n        # 返回从i开始的长为num_steps的序列\n        return corpus_indices[i: i + num_steps]\n    if device is None:\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    \n    for i in range(0, num_examples, batch_size):\n        # 每次选出batch_size个随机样本\n        batch_indices = example_indices[i: i + batch_size]  # 当前batch的各个样本的首字符的下标\n        X = [_data(j) for j in batch_indices]\n        Y = [_data(j + 1) for j in batch_indices]\n        yield torch.tensor(X, device=device), torch.tensor(Y, device=device)\n```\n\n测试一下这个函数，我们输入从0到29的连续整数作为一个人工序列，设批量大小和时间步数分别为2和6，打印随机采样每次读取的小批量样本的输入`X`和标签`Y`。\n\n```python\nmy_seq = list(range(30))\nfor X, Y in data_iter_random(my_seq, batch_size=2, num_steps=5):\n    print('X: ', X, '\\nY:', Y, '\\n')\n   \n# output:\n# X: tensor([[20, 21, 22, 23, 24],\n#         [ 5,  6,  7,  8,  9]]) \n# Y: tensor([[21, 22, 23, 24, 25],\n#         [ 6,  7,  8,  9, 10]]) \n#\n# X:  tensor([[ 0,  1,  2,  3,  4],\n#         [10, 11, 12, 13, 14]]) \n# Y: tensor([[ 1,  2,  3,  4,  5],\n#         [11, 12, 13, 14, 15]]) \n#\n# X:  tensor([[15, 16, 17, 18, 19]]) \n# Y: tensor([[16, 17, 18, 19, 20]]) \n```\n\n\n\n### 相邻采样\n\n除对原始序列做随机采样之外，我们还可以令相邻的两个随机小批量在原始序列上的位置相毗邻。这时候，我们就可以用前一个小批量最终时间步的隐藏状态来初始化下一个小批量的隐藏状态，从而使下一个小批量的输出也取决于当前小批量的输入，并如此循环下去。这对实现循环神经网络造成了两方面影响：\n\n一方面，在训练模型时，我们只需在每一个迭代周期开始时初始化隐藏状态；\n\n另一方面，当多个相邻小批量通过传递隐藏状态串联起来时，模型参数的梯度计算将依赖所有串联起来的小批量序列。同一迭代周期中，随着迭代次数的增加，梯度的计算开销会越来越大。\n\n为了使模型参数的梯度计算只依赖一次迭代读取的小批量序列，我们可以在每次读取小批量前将隐藏状态从计算图中分离出来。我们将在下一节（循环神经网络的从零开始实现）的实现中了解这种处理方式。\n\n![2](统计学习的语言模型/2.png)\n\n```python\ndef data_iter_consecutive(corpus_indices, batch_size, num_steps, device=None):\n    if device is None:\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    corpus_len = len(corpus_indices) // batch_size * batch_size  # 保留下来的序列的长度\n    corpus_indices = corpus_indices[: corpus_len]  # 仅保留前corpus_len个字符，以保证可以整除batch_size\n    indices = torch.tensor(corpus_indices, device=device)\n    indices = indices.view(batch_size, -1)  # resize成(batch_size, )\n    batch_num = (indices.shape[1] - 1) // num_steps\n    for i in range(batch_num):\n        i = i * num_steps\n        X = indices[:, i: i + num_steps]\n        Y = indices[:, i + 1: i + num_steps + 1]\n        yield X, Y\n        \nfor X, Y in data_iter_consecutive(my_seq, batch_size=2, num_steps=6):\n    print('X: ', X, '\\nY:', Y, '\\n')\n    \n# output:\n# X:  tensor([[ 0,  1,  2,  3,  4,  5],\n#         [15, 16, 17, 18, 19, 20]]) \n# Y: tensor([[ 1,  2,  3,  4,  5,  6],\n#         [16, 17, 18, 19, 20, 21]]) \n#\n# X:  tensor([[ 6,  7,  8,  9, 10, 11],\n#         [21, 22, 23, 24, 25, 26]]) \n# Y: tensor([[ 7,  8,  9, 10, 11, 12],\n#         [22, 23, 24, 25, 26, 27]]) \n```\n\n","tags":["Dive系列"],"categories":["NLP"]},{"title":"【NLP】文本预处理","url":"/2020/02/15/【NLP】文本预处理/","content":"\n\n\n## 文本预处理\n\n文本是一类序列数据，一篇文章可以看作是字符或单词的序列，本节将介绍文本数据的常见预处理步骤，预处理通常包括四个步骤：1. 读入文本；2. 句子转化为词序列；3. 建立字典，将每个词映射到一个唯一的索引；4.将文本从词的序列转换为索引的序列，方便输入模型。\n\n\n\n### 读入文本\n\n我们用一部英文小说，即H. G. Well的[Time Machine](http://www.gutenberg.org/ebooks/35)，作为示例，展示文本预处理的具体过程。\n\n``` python\nimport collections\nimport re\n\ndef read_time_machine():\n    with open('timemachine.txt', 'r') as f:\n        # 此处正则表达式表示：1.去掉开头结尾的空格和制表符；2.大写字母转小写；\n        # 3.把所有的非a-z的字符转化为空格。\n        lines = [re.sub('[^a-z]+', ' ', line.strip().lower()) for line in f]\n    return lines\n    \nlines = read_time_machine()\nprint('Info: Num of sentences is %d.' % len(lines))\n\n# output: Info: Num of sentences is 3221.\n```\n\n\n\n### 句子转化为词序列 - 简单的分词\n\n将一个句子划分成若干个词（token），转换为一个词的序列。\n``` python\ndef tokenize(sentences, token):\n    \"\"\"Split sentences into word or char tokens\"\"\"\n    if token == 'word':\n        return [sentence.split(' ') for sentence in sentences]\n    elif token == 'char':\n        return [list(sentence) for sentence in sentences]\n    else:\n        print('ERROR: unkown token type '+token)\n        \ntokens = tokenize(lines, 'word')\ntokens[0:2]\n\n# output: [['the', 'time', 'machine', 'by', 'h', 'g', 'wells', ''], ['']]\n```\n\n\n\n### 建立字典\n\n为了方便模型处理，我们需要将字符串转换为数字。因此我们需要先构建一个字典（vocabulary），将每个词映射到一个唯一的索引编号。\n\n```python\nclass Vocab(object):\n    def __init__(self, tokens, min_freq=0, use_special_tokens=False):\n        # min_freq为阈值\n        counter = count_corpus(tokens)\n        self.token_freqs = list(counter.items())\n        self.idx_to_token = []\n        if use_special_tokens:\n            # padding, begin of sentence, end of sentence, unknown\n            # unk是指在语料库中未出现过的token\n            # 需要注意：无论use_special_token参数是否为真，都会使用UNK来表示未登录词。\n            self.pad, self.bos, self.eos, self.unk = (0, 1, 2, 3)\n            self.idx_to_token += ['', '', '', '']\n        else:\n            self.unk = 0\n            self.idx_to_token += ['']\n        self.idx_to_token += [token for token, freq in self.token_freqs\n                        if freq >= min_freq and token not in self.idx_to_token]\n        self.token_to_idx = dict()\n        for idx, token in enumerate(self.idx_to_token):\n            self.token_to_idx[token] = idx\n\n    def __len__(self):\n        return len(self.idx_to_token)\n\n    def __getitem__(self, tokens):\n        if not isinstance(tokens, (list, tuple)):\n            return self.token_to_idx.get(tokens, self.unk)\n        return [self.__getitem__(token) for token in tokens]\n\n    def to_tokens(self, indices):\n        if not isinstance(indices, (list, tuple)):\n            return self.idx_to_token[indices]\n        return [self.idx_to_token[index] for index in indices]\n\ndef count_corpus(sentences):\n    tokens = [tk for st in sentences for tk in st]\n    return collections.Counter(tokens)  # 返回一个字典，记录每个词的出现次数\n  \n  \nvocab = Vocab(tokens)\nprint(list(vocab.token_to_idx.items())[0:10])\n\n# output: [('', 0), ('the', 1), ('time', 2), ('machine', 3), ('by', 4), ('h', 5), ('g', 6), ('wells', 7), ('i', 8), ('traveller', 9)]\n```\n\n\n\n### 将词转为索引\n\n使用字典，我们可以将原文本中的句子从单词序列转换为索引序列。\n\n```python\nfor i in range(8, 10):\n    print('words:', tokens[i])\n    print('indices:', vocab[tokens[i]])\n    \n# output: \n# words: ['the', 'time', 'traveller', 'for', 'so', 'it', 'will', 'be', 'convenient', 'to', 'speak', 'of', 'him', '']\n# indices: [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0]\n# words: ['was', 'expounding', 'a', 'recondite', 'matter', 'to', 'us', 'his', 'grey', 'eyes', 'shone', 'and']\n# indices: [20, 21, 22, 23, 24, 16, 25, 26, 27, 28, 29, 30]\n```\n\n\n\n### 用现有工具进行分词\n\n我们前面介绍的分词方式非常简单，它至少有以下几个缺点:\n1. 标点符号通常可以提供语义信息，但是我们的方法直接将其丢弃了\n2. 类似“shouldn't\", \"doesn't\"这样的词会被错误地处理\n3. 类似\"Mr.\", \"Dr.\"这样的词会被错误地处理\n\n我们可以通过引入更复杂的规则来解决这些问题.\n\n下面是一个简单的例子：\n\n```python\ntext = \"Mr. Chen doesn't agree with my suggestion.\"\nfrom nltk.tokenize import word_tokenize\nprint(word_tokenize(text))\n\n# output: ['Mr.', 'Chen', 'does', \"n't\", 'agree', 'with', 'my', 'suggestion', '.']\n```\n\n","tags":["Dive系列"],"categories":["NLP"]},{"title":"【GNN】Note：图深度表示基础和前沿进展","url":"/2020/02/10/【GNN】Note：图深度表示基础和前沿进展/","content":"\n![1](【GNN】Note：图深度表示基础和前沿进展/1.jpg)\n\n![2](【GNN】Note：图深度表示基础和前沿进展/2.jpg)\n\n![3](【GNN】Note：图深度表示基础和前沿进展/3.jpg)\n\n![4](【GNN】Note：图深度表示基础和前沿进展/4.jpg)\n\n![5](【GNN】Note：图深度表示基础和前沿进展/5.jpg)\n\n![6](【GNN】Note：图深度表示基础和前沿进展/6.jpg)\n\n![7](【GNN】Note：图深度表示基础和前沿进展/7.jpg)\n\n![8](【GNN】Note：图深度表示基础和前沿进展/8.jpg)\n\n![9](【GNN】Note：图深度表示基础和前沿进展/9.jpg)","tags":["GNN"],"categories":["GNN"]},{"title":"【CS224N】L1. Word Embedding","url":"/2020/01/18/【CS224N】L1. Introduction and Word Vectors/","content":"\n![1](【NLP】L1-Introduction-and-Word-Vectors/1.jpg)\n\n![2](【NLP】L1-Introduction-and-Word-Vectors/2.jpg)\n\n![3](【NLP】L1-Introduction-and-Word-Vectors/3.jpg)","tags":["CS224N"],"categories":["NLP"]},{"title":"Hello World","url":"/2020/01/11/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]