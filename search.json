[{"title":"【NLP】统计学习的语言模型","url":"/2020/02/15/【NLP】统计学习的语言模型/","content":"\n\n\n# 语言模型\n\n一段自然语言文本可以看作是一个离散时间序列，给定一个长度为$T$的词的序列$w_1, w_2, \\ldots, w_T$。\n语言模型的目标就是评估该序列是否合理，即计算该序列的概率：\n\n$$\nP(w_1, w_2, \\ldots, w_T) \n$$\n\n\n本节我们介绍基于统计的语言模型，主要是$n$元语法（$n$-gram）。在后续内容中，我们将会介绍基于神经网络的语言模型。\n\n\n\n## 统计学习的语言模型\n\n\n假设序列$w_1, w_2, \\ldots, w_T$中的每个词是依次生成的，我们有\n\n\n$$\n\\begin{align*}\nP(w_1, w_2, \\ldots, w_T)\n&= \\prod_{t=1}^T P(w_t \\mid w_1, \\ldots, w_{t-1})\\\\\n&= P(w_1)P(w_2 \\mid w_1) \\cdots P(w_T \\mid w_1w_2\\cdots w_{T-1})\n\\end{align*}\n$$\n\n\n例如，一段含有4个词的文本序列的概率\n\n\n$$\nP(w_1, w_2, w_3, w_4) =  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_1, w_2, w_3).\n$$\n\n\n语言模型的参数就是词的概率以及给定前几个词情况下的条件概率。设训练数据集为一个大型文本语料库，如维基百科的所有条目，词的概率可以通过该词在训练数据集中的相对词频来计算，例如，$w_1$的概率可以计算为：\n\n\n$$\n\\hat P(w_1) = \\frac{n(w_1)}{n}\n$$\n\n\n其中$n(w_1)$为语料库中以$w_1$作为第一个词的文本的数量，$n$为语料库中文本的总数量。\n\n类似的，给定$w_1$情况下，$w_2$的条件概率可以计算为：\n\n\n$$\n\\hat P(w_2 \\mid w_1) = \\frac{n(w_1, w_2)}{n(w_1)}\n$$\n\n其中$n(w_1, w_2)$为语料库中以$w_1$作为第一个词，$w_2$作为第二个词的文本的数量。\n\n***注意，这里的n指的不是w1,w1w2单词出现的次数，而是以w1, w1w2开头的文本数量。***\n\n\n\n## n元语法\n\n序列长度增加，计算和存储多个词共同出现的概率的复杂度会呈指数级增加。$n$元语法通过马尔可夫假设简化模型，马尔科夫假设是指一个词的出现只与前面$n$个词相关，即$n$阶马尔可夫链（Markov chain of order $n$），如果$n=1$，那么有$P(w_3 \\mid w_1, w_2) = P(w_3 \\mid w_2)$。基于$n-1$阶马尔可夫链，我们可以将语言模型改写为\n\n\n$$\nP(w_1, w_2, \\ldots, w_T) = \\prod_{t=1}^T P(w_t \\mid w_{t-(n-1)}, \\ldots, w_{t-1}) .\n$$\n\n\n以上也叫$n$元语法（$n$-grams），它是基于$n - 1$阶马尔可夫链的概率语言模型。例如，当$n=2$时，含有4个词的文本序列的概率就可以改写为：\n\n\n$$\n\\begin{align*}\nP(w_1, w_2, w_3, w_4)\n&= P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_1, w_2, w_3)\\\\\n&= P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_2) P(w_4 \\mid w_3)\n\\end{align*}\n$$\n\n\n当$n$分别为1、2和3时，我们将其分别称作一元语法（unigram）、二元语法（bigram）和三元语法（trigram）。例如，长度为4的序列$w_1, w_2, w_3, w_4$在一元语法、二元语法和三元语法中的概率分别为\n\n\n$$\n\\begin{aligned}\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2) P(w_3) P(w_4) ,\\\\\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_2) P(w_4 \\mid w_3) ,\\\\\nP(w_1, w_2, w_3, w_4) &=  P(w_1) P(w_2 \\mid w_1) P(w_3 \\mid w_1, w_2) P(w_4 \\mid w_2, w_3) .\n\\end{aligned}\n$$\n\n当$n$较小时，$n$元语法往往并不准确。例如，在一元语法中，由三个词组成的句子“你走先”和“你先走”的概率是一样的。然而，当$n$较大时，$n$元语法需要计算并存储大量的词频和多词相邻频率。\n\n\n\n***思考：$n$元语法可能有哪些缺陷?***\n\n1. 参数空间过大；\n2. 数据稀疏。\n\n\n\n## 语言模型数据集\n### 读取数据集\n\n```python\nwith open('jaychou_lyrics.txt') as f:\n    corpus_chars = f.read()\nprint(len(corpus_chars))\nprint(corpus_chars[: 40])\ncorpus_chars = corpus_chars.replace('\\n', ' ').replace('\\r', ' ')\ncorpus_chars = corpus_chars[: 10000] # 只保留前10000个字符\n\n# output\n# 63282\n# 想要有直升机\n# 想要和你飞到宇宙去\n# 想要和你融化在一起\n# 融化在宇宙里\n# 我每天每天每\n```\n\n### 建立字符索引\n\n```python\nidx_to_char = list(set(corpus_chars)) # 去重，得到索引到字符的映射\nchar_to_idx = {char: i for i, char in enumerate(idx_to_char)} # 字典推导式，构造字符到索引的映射\nvocab_size = len(char_to_idx)\nprint(vocab_size)\n\ncorpus_indices = [char_to_idx[char] for char in corpus_chars]  # 将每个字符转化为索引，得到一个索引的序列\nsample = corpus_indices[: 20]\nprint('chars:', ''.join([idx_to_char[idx] for idx in sample]))\nprint('indices:', sample)\n\n# output:\n# 1027\n# chars: 想要有直升机 想要和你飞到宇宙去 想要和\n# indices: [519, 525, 36, 664, 964, 16, 522, 519, 525, 184, 784, 828, 218, 371, 618, 889, 522, 519, 525, 184]\n\n# 定义函数`load_data_jay_lyrics`，在后续章节中直接调用。\ndef load_data_jay_lyrics():\n    with open('jaychou_lyrics.txt') as f:\n        corpus_chars = f.read()\n    corpus_chars = corpus_chars.replace('\\n', ' ').replace('\\r', ' ')\n    corpus_chars = corpus_chars[0:10000]\n    idx_to_char = list(set(corpus_chars))\n    char_to_idx = dict([(char, i) for i, char in enumerate(idx_to_char)])\n    vocab_size = len(char_to_idx)\n    corpus_indices = [char_to_idx[char] for char in corpus_chars]\n    return corpus_indices, char_to_idx, idx_to_char, vocab_size\n```\n\n\n\n## 时序数据的采样\n\n在训练中我们需要每次随机读取小批量样本和标签。与之前章节的实验数据不同的是，时序数据的一个样本通常包含连续的字符。假设时间步数为5，样本序列为5个字符，即“想”“要”“有”“直”“升”。该样本的标签序列为这些字符分别在训练集中的下一个字符，即“要”“有”“直”“升”“机”，即$X$=“想要有直升”，$Y$=“要有直升机”。\n\n现在我们考虑序列“想要有直升机，想要和你飞到宇宙去”，如果时间步数为5，有以下可能的样本和标签：\n* $X$：“想要有直升”，$Y$：“要有直升机”\n* $X$：“要有直升机”，$Y$：“有直升机，”\n* $X$：“有直升机，”，$Y$：“直升机，想”\n* ...\n* $X$：“要和你飞到”，$Y$：“和你飞到宇”\n* $X$：“和你飞到宇”，$Y$：“你飞到宇宙”\n* $X$：“你飞到宇宙”，$Y$：“飞到宇宙去”\n\n可以看到，如果序列的长度为$T$，时间步数为$n$，那么一共有$T-n$个合法的样本，**但是这些样本有大量的重合**，我们通常采用更加高效的采样方式。我们有两种方式对时序数据进行采样，分别是随机采样和相邻采样。\n\n### 随机采样\n\n下面的代码每次从数据里随机采样一个小批量。其中批量大小`batch_size`是每个小批量的样本数，`num_steps`是每个样本所包含的时间步数。\n在随机采样中，每个样本是原始序列上任意截取的一段序列，相邻的两个随机小批量在原始序列上的位置不一定相毗邻。\n\n<img src=\"统计学习的语言模型/image-20200215162542109.png\" alt=\"统计学习的语言模型/image-20200215162542109\" style=\"\" />\n\n```python\nimport torch\nimport random\ndef data_iter_random(corpus_indices, batch_size, num_steps, device=None):\n    # 减1是因为对于长度为n的序列，X最多只有包含其中的前n - 1个字符\n    num_examples = (len(corpus_indices) - 1) // num_steps  # 下取整，得到不重叠情况下的样本个数\n    example_indices = [i * num_steps for i in range(num_examples)]  # 每个样本的第一个字符在corpus_indices中的下标\n    random.shuffle(example_indices)\n\n    def _data(i):\n        # 返回从i开始的长为num_steps的序列\n        return corpus_indices[i: i + num_steps]\n    if device is None:\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    \n    for i in range(0, num_examples, batch_size):\n        # 每次选出batch_size个随机样本\n        batch_indices = example_indices[i: i + batch_size]  # 当前batch的各个样本的首字符的下标\n        X = [_data(j) for j in batch_indices]\n        Y = [_data(j + 1) for j in batch_indices]\n        yield torch.tensor(X, device=device), torch.tensor(Y, device=device)\n```\n\n****测试一下这个函数，我们输入从0到29的连续整数作为一个人工序列，设批量大小和时间步数分别为2和6，打印随机采样每次读取的小批量样本的输入`X`和标签`Y`。\n\n```python\nmy_seq = list(range(30))\nfor X, Y in data_iter_random(my_seq, batch_size=2, num_steps=5):\n    print('X: ', X, '\\nY:', Y, '\\n')\n   \n# output:\n# X: tensor([[20, 21, 22, 23, 24],\n#         [ 5,  6,  7,  8,  9]]) \n# Y: tensor([[21, 22, 23, 24, 25],\n#         [ 6,  7,  8,  9, 10]]) \n#\n# X:  tensor([[ 0,  1,  2,  3,  4],\n#         [10, 11, 12, 13, 14]]) \n# Y: tensor([[ 1,  2,  3,  4,  5],\n#         [11, 12, 13, 14, 15]]) \n#\n# X:  tensor([[15, 16, 17, 18, 19]]) \n# Y: tensor([[16, 17, 18, 19, 20]]) \n```\n\n\n\n### 相邻采样\n\n在相邻采样中，相邻的两个随机小批量在原始序列上的位置相毗邻。\n\n<img src=\"统计学习的语言模型/image-20200215162010007.png\" alt=\"统计学习的语言模型/image-20200215162010007\" style=\"\" />\n\n```python\ndef data_iter_consecutive(corpus_indices, batch_size, num_steps, device=None):\n    if device is None:\n        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    corpus_len = len(corpus_indices) // batch_size * batch_size  # 保留下来的序列的长度\n    corpus_indices = corpus_indices[: corpus_len]  # 仅保留前corpus_len个字符，以保证可以整除batch_size\n    indices = torch.tensor(corpus_indices, device=device)\n    indices = indices.view(batch_size, -1)  # resize成(batch_size, )\n    batch_num = (indices.shape[1] - 1) // num_steps\n    for i in range(batch_num):\n        i = i * num_steps\n        X = indices[:, i: i + num_steps]\n        Y = indices[:, i + 1: i + num_steps + 1]\n        yield X, Y\n        \nfor X, Y in data_iter_consecutive(my_seq, batch_size=2, num_steps=6):\n    print('X: ', X, '\\nY:', Y, '\\n')\n    \n# output:\n# X:  tensor([[ 0,  1,  2,  3,  4,  5],\n#         [15, 16, 17, 18, 19, 20]]) \n# Y: tensor([[ 1,  2,  3,  4,  5,  6],\n#         [16, 17, 18, 19, 20, 21]]) \n#\n# X:  tensor([[ 6,  7,  8,  9, 10, 11],\n#         [21, 22, 23, 24, 25, 26]]) \n# Y: tensor([[ 7,  8,  9, 10, 11, 12],\n#         [22, 23, 24, 25, 26, 27]]) \n```\n\n","tags":["Dive系列"],"categories":["NLP"]},{"title":"【NLP】文本预处理","url":"/2020/02/15/【NLP】文本预处理/","content":"\n\n\n## 文本预处理\n\n文本是一类序列数据，一篇文章可以看作是字符或单词的序列，本节将介绍文本数据的常见预处理步骤，预处理通常包括四个步骤：1. 读入文本；2. 句子转化为词序列；3. 建立字典，将每个词映射到一个唯一的索引；4.将文本从词的序列转换为索引的序列，方便输入模型。\n\n\n\n### 读入文本\n\n我们用一部英文小说，即H. G. Well的[Time Machine](http://www.gutenberg.org/ebooks/35)，作为示例，展示文本预处理的具体过程。\n\n``` python\nimport collections\nimport re\n\ndef read_time_machine():\n    with open('timemachine.txt', 'r') as f:\n        # 此处正则表达式表示：1.去掉开头结尾的空格和制表符；2.大写字母转小写；\n        # 3.把所有的非a-z的字符转化为空格。\n        lines = [re.sub('[^a-z]+', ' ', line.strip().lower()) for line in f]\n    return lines\n    \nlines = read_time_machine()\nprint('Info: Num of sentences is %d.' % len(lines))\n\n# output: Info: Num of sentences is 3221.\n```\n\n\n\n### 句子转化为词序列 - 简单的分词\n\n将一个句子划分成若干个词（token），转换为一个词的序列。\n``` python\ndef tokenize(sentences, token):\n    \"\"\"Split sentences into word or char tokens\"\"\"\n    if token == 'word':\n        return [sentence.split(' ') for sentence in sentences]\n    elif token == 'char':\n        return [list(sentence) for sentence in sentences]\n    else:\n        print('ERROR: unkown token type '+token)\n        \ntokens = tokenize(lines, 'word')\ntokens[0:2]\n\n# output: [['the', 'time', 'machine', 'by', 'h', 'g', 'wells', ''], ['']]\n```\n\n\n\n### 建立字典\n\n为了方便模型处理，我们需要将字符串转换为数字。因此我们需要先构建一个字典（vocabulary），将每个词映射到一个唯一的索引编号。\n\n```python\nclass Vocab(object):\n    def __init__(self, tokens, min_freq=0, use_special_tokens=False):\n        # min_freq为阈值\n        counter = count_corpus(tokens)\n        self.token_freqs = list(counter.items())\n        self.idx_to_token = []\n        if use_special_tokens:\n            # padding, begin of sentence, end of sentence, unknown\n            # unk是指在语料库中未出现过的token\n            # 需要注意：无论use_special_token参数是否为真，都会使用UNK来表示未登录词。\n            self.pad, self.bos, self.eos, self.unk = (0, 1, 2, 3)\n            self.idx_to_token += ['', '', '', '']\n        else:\n            self.unk = 0\n            self.idx_to_token += ['']\n        self.idx_to_token += [token for token, freq in self.token_freqs\n                        if freq >= min_freq and token not in self.idx_to_token]\n        self.token_to_idx = dict()\n        for idx, token in enumerate(self.idx_to_token):\n            self.token_to_idx[token] = idx\n\n    def __len__(self):\n        return len(self.idx_to_token)\n\n    def __getitem__(self, tokens):\n        if not isinstance(tokens, (list, tuple)):\n            return self.token_to_idx.get(tokens, self.unk)\n        return [self.__getitem__(token) for token in tokens]\n\n    def to_tokens(self, indices):\n        if not isinstance(indices, (list, tuple)):\n            return self.idx_to_token[indices]\n        return [self.idx_to_token[index] for index in indices]\n\ndef count_corpus(sentences):\n    tokens = [tk for st in sentences for tk in st]\n    return collections.Counter(tokens)  # 返回一个字典，记录每个词的出现次数\n  \n  \nvocab = Vocab(tokens)\nprint(list(vocab.token_to_idx.items())[0:10])\n\n# output: [('', 0), ('the', 1), ('time', 2), ('machine', 3), ('by', 4), ('h', 5), ('g', 6), ('wells', 7), ('i', 8), ('traveller', 9)]\n```\n\n\n\n### 将词转为索引\n\n使用字典，我们可以将原文本中的句子从单词序列转换为索引序列。\n\n```python\nfor i in range(8, 10):\n    print('words:', tokens[i])\n    print('indices:', vocab[tokens[i]])\n    \n# output: \n# words: ['the', 'time', 'traveller', 'for', 'so', 'it', 'will', 'be', 'convenient', 'to', 'speak', 'of', 'him', '']\n# indices: [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0]\n# words: ['was', 'expounding', 'a', 'recondite', 'matter', 'to', 'us', 'his', 'grey', 'eyes', 'shone', 'and']\n# indices: [20, 21, 22, 23, 24, 16, 25, 26, 27, 28, 29, 30]\n```\n\n\n\n### 用现有工具进行分词\n\n我们前面介绍的分词方式非常简单，它至少有以下几个缺点:\n1. 标点符号通常可以提供语义信息，但是我们的方法直接将其丢弃了\n2. 类似“shouldn't\", \"doesn't\"这样的词会被错误地处理\n3. 类似\"Mr.\", \"Dr.\"这样的词会被错误地处理\n\n我们可以通过引入更复杂的规则来解决这些问题.\n\n下面是一个简单的例子：\n\n```python\ntext = \"Mr. Chen doesn't agree with my suggestion.\"\nfrom nltk.tokenize import word_tokenize\nprint(word_tokenize(text))\n\n# output: ['Mr.', 'Chen', 'does', \"n't\", 'agree', 'with', 'my', 'suggestion', '.']\n```\n\n","tags":["Dive系列"],"categories":["NLP"]},{"title":"【GNN】Note：图深度表示基础和前沿进展","url":"/2020/02/10/【GNN】Note：图深度表示基础和前沿进展/","content":"\n![1](Note：图深度表示基础和前沿进展/1.jpg)\n\n![2](Note：图深度表示基础和前沿进展/2.jpg)\n\n![3](Note：图深度表示基础和前沿进展/3.jpg)\n\n![4](Note：图深度表示基础和前沿进展/4.jpg)\n\n![5](Note：图深度表示基础和前沿进展/5.jpg)\n\n![6](Note：图深度表示基础和前沿进展/6.jpg)\n\n![7](Note：图深度表示基础和前沿进展/7.jpg)\n\n![8](Note：图深度表示基础和前沿进展/8.jpg)\n\n![9](Note：图深度表示基础和前沿进展/9.jpg)","tags":["GNN"],"categories":["GNN"]},{"title":"【NLP】L1. Introduction and Word Vectors","url":"/2020/01/18/【NLP】L1. Introduction and Word Vectors/","content":"\n![1](L1-Introduction-and-Word-Vectors/1.jpg)\n\n![2](L1-Introduction-and-Word-Vectors/2.jpg)\n\n![3](L1-Introduction-and-Word-Vectors/3.jpg)","tags":["CS224N"],"categories":["NLP"]},{"title":"Hello World","url":"/2020/01/11/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]